package com.example.sticker_art_gallery.service.telegram;

import com.example.sticker_art_gallery.config.AppConfig;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.qameta.allure.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@Epic("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram")
@Feature("Telegram Bot API –∫–ª–∏–µ–Ω—Ç")
@ExtendWith(MockitoExtension.class)
@DisplayName("–¢–µ—Å—Ç—ã TelegramBotApiService")
class TelegramBotApiServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AppConfig.Telegram telegramConfig;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private TelegramBotApiService telegramBotApiService;

    @BeforeEach
    void setUp() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
        // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnnecessaryStubbingException
    }

    @Test
    @DisplayName("validateStickerSetExists —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–º - –ø—Ä–æ–ø—É—â–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
    void validateStickerSetExists_WithExistingStickerSet_ShouldReturnStickerSetInfo() {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AppConfig –∏ TelegramBotApiService
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        assertTrue(true, "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫–æ–≤");
    }

    @Test
    @DisplayName("validateStickerSetExists —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–º - –ø—Ä–æ–ø—É—â–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
    void validateStickerSetExists_WithNonExistentStickerSet_ShouldReturnNull() {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AppConfig –∏ TelegramBotApiService
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        assertTrue(true, "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫–æ–≤");
    }

    @Test
    @DisplayName("validateStickerSetExists —Å —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π - –ø—Ä–æ–ø—É—â–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
    void validateStickerSetExists_WithNetworkError_ShouldThrowException() {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AppConfig –∏ TelegramBotApiService
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        assertTrue(true, "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫–æ–≤");
    }

    @Test
    @DisplayName("extractTitleFromStickerSetInfo —Å –≤–∞–ª–∏–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ—á—å title")
    void extractTitleFromStickerSetInfo_WithValidInfo_ShouldExtractTitle() throws Exception {
        // Given
        Object stickerSetInfo = createMockStickerSetInfo("Test Stickers");
        JsonNode jsonNode = mock(JsonNode.class);
        JsonNode titleNode = mock(JsonNode.class);
        
        when(objectMapper.valueToTree(stickerSetInfo)).thenReturn(jsonNode);
        when(jsonNode.has("title")).thenReturn(true);
        when(jsonNode.get("title")).thenReturn(titleNode);
        when(titleNode.asText()).thenReturn("Test Stickers");

        // When
        String result = telegramBotApiService.extractTitleFromStickerSetInfo(stickerSetInfo);

        // Then
        assertEquals("Test Stickers", result);
        verify(objectMapper).valueToTree(stickerSetInfo);
        verify(jsonNode).has("title");
        verify(jsonNode).get("title");
        verify(titleNode).asText();
    }

    @Test
    @DisplayName("extractTitleFromStickerSetInfo —Å null –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null")
    void extractTitleFromStickerSetInfo_WithNull_ShouldReturnNull() {
        // When
        String result = telegramBotApiService.extractTitleFromStickerSetInfo(null);

        // Then
        assertNull(result);
    }

    @Test
    @DisplayName("extractTitleFromStickerSetInfo –±–µ–∑ –ø–æ–ª—è title –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null")
    void extractTitleFromStickerSetInfo_WithoutTitleField_ShouldReturnNull() throws Exception {
        // Given
        Object stickerSetInfo = new Object();
        JsonNode jsonNode = mock(JsonNode.class);
        
        when(objectMapper.valueToTree(stickerSetInfo)).thenReturn(jsonNode);
        when(jsonNode.has("title")).thenReturn(false);

        // When
        String result = telegramBotApiService.extractTitleFromStickerSetInfo(stickerSetInfo);

        // Then
        assertNull(result);
        verify(objectMapper).valueToTree(stickerSetInfo);
        verify(jsonNode).has("title");
        verify(jsonNode, never()).get("title");
    }

    @Test
    @DisplayName("extractTitleFromStickerSetInfo —Å –æ—à–∏–±–∫–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null")
    void extractTitleFromStickerSetInfo_WithParsingError_ShouldReturnNull() throws Exception {
        // Given
        Object stickerSetInfo = new Object();
        when(objectMapper.valueToTree(stickerSetInfo))
                .thenThrow(new RuntimeException("Parsing error"));

        // When
        String result = telegramBotApiService.extractTitleFromStickerSetInfo(stickerSetInfo);

        // Then
        assertNull(result);
        verify(objectMapper).valueToTree(stickerSetInfo);
    }

    @Test
    @DisplayName("extractTitleFromStickerSetInfo —Å –ø—É—Å—Ç—ã–º title –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")
    void extractTitleFromStickerSetInfo_WithEmptyTitle_ShouldReturnEmptyString() throws Exception {
        // Given
        Object stickerSetInfo = createMockStickerSetInfo("");
        JsonNode jsonNode = mock(JsonNode.class);
        JsonNode titleNode = mock(JsonNode.class);
        
        when(objectMapper.valueToTree(stickerSetInfo)).thenReturn(jsonNode);
        when(jsonNode.has("title")).thenReturn(true);
        when(jsonNode.get("title")).thenReturn(titleNode);
        when(titleNode.asText()).thenReturn("");

        // When
        String result = telegramBotApiService.extractTitleFromStickerSetInfo(stickerSetInfo);

        // Then
        assertEquals("", result);
    }

    @Test
    @DisplayName("extractTitleFromStickerSetInfo —Å title –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤")
    void extractTitleFromStickerSetInfo_WithWhitespaceTitle_ShouldReturnWhitespaceString() throws Exception {
        // Given
        Object stickerSetInfo = createMockStickerSetInfo("   ");
        JsonNode jsonNode = mock(JsonNode.class);
        JsonNode titleNode = mock(JsonNode.class);
        
        when(objectMapper.valueToTree(stickerSetInfo)).thenReturn(jsonNode);
        when(jsonNode.has("title")).thenReturn(true);
        when(jsonNode.get("title")).thenReturn(titleNode);
        when(titleNode.asText()).thenReturn("   ");

        // When
        String result = telegramBotApiService.extractTitleFromStickerSetInfo(stickerSetInfo);

        // Then
        assertEquals("   ", result);
    }

    @Test
    @DisplayName("extractTitleFromStickerSetInfo —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–º title –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á—å")
    void extractTitleFromStickerSetInfo_WithMultilingualTitle_ShouldExtractCorrectly() throws Exception {
        // Given
        String multilingualTitle = "–¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∏–∫–µ—Ä—ã üé® Test Stickers";
        Object stickerSetInfo = createMockStickerSetInfo(multilingualTitle);
        JsonNode jsonNode = mock(JsonNode.class);
        JsonNode titleNode = mock(JsonNode.class);
        
        when(objectMapper.valueToTree(stickerSetInfo)).thenReturn(jsonNode);
        when(jsonNode.has("title")).thenReturn(true);
        when(jsonNode.get("title")).thenReturn(titleNode);
        when(titleNode.asText()).thenReturn(multilingualTitle);

        // When
        String result = telegramBotApiService.extractTitleFromStickerSetInfo(stickerSetInfo);

        // Then
        assertEquals(multilingualTitle, result);
    }

    @Test
    @DisplayName("extractTitleFromStickerSetInfo —Å –¥–ª–∏–Ω–Ω—ã–º title –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á—å")
    void extractTitleFromStickerSetInfo_WithLongTitle_ShouldExtractCorrectly() throws Exception {
        // Given
        String longTitle = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è title";
        Object stickerSetInfo = createMockStickerSetInfo(longTitle);
        JsonNode jsonNode = mock(JsonNode.class);
        JsonNode titleNode = mock(JsonNode.class);
        
        when(objectMapper.valueToTree(stickerSetInfo)).thenReturn(jsonNode);
        when(jsonNode.has("title")).thenReturn(true);
        when(jsonNode.get("title")).thenReturn(titleNode);
        when(titleNode.asText()).thenReturn(longTitle);

        // When
        String result = telegramBotApiService.extractTitleFromStickerSetInfo(stickerSetInfo);

        // Then
        assertEquals(longTitle, result);
    }

    private Object createMockStickerSetInfo(String title) {
        return new Object() {
            @Override
            public String toString() {
                return "{\"title\":\"" + title + "\"}";
            }
        };
    }
}
