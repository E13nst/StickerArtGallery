package com.example.sticker_art_gallery.benchmark;

import com.example.sticker_art_gallery.config.AppConfig;
import com.example.sticker_art_gallery.dto.PageResponse;
import com.example.sticker_art_gallery.dto.StickerSetDto;
import com.example.sticker_art_gallery.model.profile.UserProfileRepository;
import com.example.sticker_art_gallery.model.telegram.StickerSetRepository;
import com.example.sticker_art_gallery.model.user.UserRepository;
import com.example.sticker_art_gallery.testdata.TestDataBuilder;
import com.example.sticker_art_gallery.teststeps.StickerSetTestSteps;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.qameta.allure.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.concurrent.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

/**
 * –ë–µ–Ω—á–º–∞—Ä–∫-—Ç–µ—Å—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏
 */
@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Transactional
@Epic("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
@Feature("–ë–µ–Ω—á–º–∞—Ä–∫ –≥–∞–ª–µ—Ä–µ–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤")
@DisplayName("–ë–µ–Ω—á–º–∞—Ä–∫: –∑–∞–≥—Ä—É–∑–∫–∞ –≥–∞–ª–µ—Ä–µ–∏")
class GalleryLoadBenchmarkTest {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(GalleryLoadBenchmarkTest.class);
    
    @Autowired
    private MockMvc mockMvc;
    
    @Autowired
    private ObjectMapper objectMapper;
    
    @Autowired
    private AppConfig appConfig;
    
    @Autowired
    private StickerSetRepository stickerSetRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private UserProfileRepository userProfileRepository;
    
    private StickerSetTestSteps testSteps;
    private String validInitData;
    
    private static final int PAGE = 0;
    private static final int SIZE = 20;
    private static final int STICKERS_PER_SET = 4;
    private static final int THREAD_POOL_SIZE = 20; // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    private static final int TIMEOUT_SECONDS = 60; // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    
    @BeforeEach
    void setUp() throws Exception {
        testSteps = new StickerSetTestSteps();
        testSteps.setMockMvc(mockMvc);
        testSteps.setObjectMapper(objectMapper);
        testSteps.setAppConfig(appConfig);
        testSteps.setStickerSetRepository(stickerSetRepository);
        testSteps.setUserRepository(userRepository);
        testSteps.setUserProfileRepository(userProfileRepository);
        
        testSteps.createTestUserAndProfile(TestDataBuilder.TEST_USER_ID);
        validInitData = testSteps.createValidInitData(TestDataBuilder.TEST_USER_ID);
    }
    
    @Test
    @Story("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏")
    @DisplayName("üìä –ë–µ–Ω—á–º–∞—Ä–∫: –∑–∞–≥—Ä—É–∑–∫–∞ 20 —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –∏ 80 —Ñ–∞–π–ª–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤")
    @Description("–ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ (20 —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤) –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤ (4 –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ç–∞)")
    @Severity(SeverityLevel.CRITICAL)
    void benchmarkGalleryLoadWithStickerFiles() throws Exception {
        LOGGER.info("üöÄ –ù–∞—á–∞–ª–æ –±–µ–Ω—á–º–∞—Ä–∫-—Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏");
        
        LoadMetrics metrics = new LoadMetrics();
        long overallStartTime = System.currentTimeMillis();
        
        // ===== –®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ =====
        Allure.step("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ (page=0, size=20)", () -> {
            LOGGER.info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤: page={}, size={}", PAGE, SIZE);
        });
        
        long stickerSetsStartTime = System.currentTimeMillis();
        
        MvcResult result = mockMvc.perform(get("/api/stickersets")
                        .param("page", String.valueOf(PAGE))
                        .param("size", String.valueOf(SIZE)))
                .andExpect(status().isOk())
                .andReturn();
        
        long stickerSetsLoadTime = System.currentTimeMillis() - stickerSetsStartTime;
        
        String responseBody = result.getResponse().getContentAsString();
        PageResponse<StickerSetDto> pageResponse = objectMapper.readValue(
                responseBody, 
                new TypeReference<PageResponse<StickerSetDto>>() {}
        );
        
        List<StickerSetDto> stickerSets = pageResponse.getContent();
        
        LOGGER.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –∑–∞ {} –º—Å", stickerSets.size(), stickerSetsLoadTime);
        Allure.addAttachment("–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤", "text/plain", 
                stickerSetsLoadTime + " –º—Å");
        
        assertFalse(stickerSets.isEmpty(), "–°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        
        // ===== –®–ê–ì 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ file_id –∏–∑ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ =====
        Allure.step("–®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ file_id —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ç–∞", () -> {
            LOGGER.info("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ file_id —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤", stickerSets.size());
        });
        
        List<String> fileIdsToLoad = extractFileIds(stickerSets, STICKERS_PER_SET);
        
        LOGGER.info("üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ {} file_id –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", fileIdsToLoad.size());
        Allure.addAttachment("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", "text/plain", 
                fileIdsToLoad.size() + " —Ñ–∞–π–ª–æ–≤");
        
        assertFalse(fileIdsToLoad.isEmpty(), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω file_id –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏");
        
        // ===== –®–ê–ì 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ =====
        Allure.step("–®–∞–≥ 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ " + fileIdsToLoad.size() + " —Ñ–∞–π–ª–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤", () -> {
            LOGGER.info("‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ {} —Ñ–∞–π–ª–æ–≤ (pool size: {})", 
                    fileIdsToLoad.size(), THREAD_POOL_SIZE);
        });
        
        ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);
        List<CompletableFuture<Void>> futures = new ArrayList<>();
        
        for (String fileId : fileIdsToLoad) {
            CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                loadStickerFile(fileId, metrics);
            }, executorService);
            
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        try {
            CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
                    .get(TIMEOUT_SECONDS, TimeUnit.SECONDS);
        } catch (TimeoutException e) {
            LOGGER.error("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {} —Å–µ–∫—É–Ω–¥", TIMEOUT_SECONDS);
            fail("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: " + TIMEOUT_SECONDS + " —Å–µ–∫—É–Ω–¥");
        } finally {
            executorService.shutdown();
        }
        
        metrics.finish();
        long overallDuration = System.currentTimeMillis() - overallStartTime;
        
        LOGGER.info("üèÅ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {} –º—Å", overallDuration);
        
        // ===== –®–ê–ì 4: –°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ =====
        Allure.step("–®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", () -> {
            LoadMetrics.Statistics stats = metrics.getStatistics();
            
            LOGGER.info(stats.toFormattedString());
            
            // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –æ—Ç—á–µ—Ç—É Allure
            attachStatisticsToAllure(stats, metrics, stickerSetsLoadTime, overallDuration);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ SLA (–ø—Ä–∏–º–µ—Ä: 95% –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 5000 –º—Å)
            if (stats.getP95Ms() != null) {
                Allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ SLA: p95 < 5000ms", () -> {
                    assertTrue(stats.getP95Ms() < 5000, 
                            String.format("SLA –Ω–∞—Ä—É—à–µ–Ω: p95=%.2f –º—Å (–æ–∂–∏–¥–∞–ª–æ—Å—å < 5000 –º—Å)", stats.getP95Ms()));
                    LOGGER.info("‚úÖ SLA –≤—ã–ø–æ–ª–Ω–µ–Ω: p95={} –º—Å", stats.getP95Ms());
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            Allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (> 90%)", () -> {
                double successRate = stats.getSuccessRate();
                assertTrue(successRate > 90.0, 
                        String.format("–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: %.1f%% (–æ–∂–∏–¥–∞–ª–æ—Å—å > 90%%)", successRate));
                LOGGER.info("‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {}%", successRate);
            });
        });
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ file_id –∏–∑ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏ (–Ω—É–∂–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à–∞)
     */
    private List<String> extractFileIds(List<StickerSetDto> stickerSets, int countPerSet) {
        List<String> fileIds = new ArrayList<>();
        Random random = new Random(42); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
        
        for (StickerSetDto stickerSet : stickerSets) {
            Object telegramInfo = stickerSet.getTelegramStickerSetInfo();
            
            if (telegramInfo == null) {
                LOGGER.warn("‚ö†Ô∏è StickerSet {} –Ω–µ –∏–º–µ–µ—Ç telegramStickerSetInfo", stickerSet.getName());
                continue;
            }
            
            try {
                // –ü–∞—Ä—Å–∏–º JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ
                @SuppressWarnings("unchecked")
                Map<String, Object> stickerSetInfo = (Map<String, Object>) telegramInfo;
                
                @SuppressWarnings("unchecked")
                List<Map<String, Object>> stickers = (List<Map<String, Object>>) stickerSetInfo.get("stickers");
                
                if (stickers == null || stickers.isEmpty()) {
                    LOGGER.warn("‚ö†Ô∏è StickerSet {} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∏–∫–µ—Ä–æ–≤", stickerSet.getName());
                    continue;
                }
                
                // –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
                List<Map<String, Object>> shuffled = new ArrayList<>(stickers);
                Collections.shuffle(shuffled, random);
                
                int count = Math.min(countPerSet, shuffled.size());
                for (int i = 0; i < count; i++) {
                    Map<String, Object> sticker = shuffled.get(i);
                    
                    // –ò—â–µ–º file_id –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö (file_id, thumbnail, etc.)
                    String fileId = extractFileIdFromSticker(sticker);
                    if (fileId != null) {
                        fileIds.add(fileId);
                    }
                }
                
            } catch (Exception e) {
                LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ file_id –∏–∑ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ {}: {}", 
                        stickerSet.getName(), e.getMessage());
            }
        }
        
        return fileIds;
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç file_id –∏–∑ —Å—Ç–∏–∫–µ—Ä–∞ (–∏—â–µ—Ç –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö)
     */
    private String extractFileIdFromSticker(Map<String, Object> sticker) {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
        String[] fileIdFields = {"file_id", "thumb", "thumbnail"};
        
        for (String field : fileIdFields) {
            Object value = sticker.get(field);
            if (value != null) {
                if (value instanceof String) {
                    return (String) value;
                } else if (value instanceof Map) {
                    @SuppressWarnings("unchecked")
                    Map<String, Object> nestedMap = (Map<String, Object>) value;
                    Object fileId = nestedMap.get("file_id");
                    if (fileId instanceof String) {
                        return (String) fileId;
                    }
                }
            }
        }
        
        return null;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
     */
    private void loadStickerFile(String fileId, LoadMetrics metrics) {
        long startTime = System.currentTimeMillis();
        
        try {
            MvcResult result = mockMvc.perform(get("/api/stickers/" + fileId))
                    .andReturn();
            
            long duration = System.currentTimeMillis() - startTime;
            int status = result.getResponse().getStatus();
            
            if (status == HttpStatus.OK.value()) {
                byte[] content = result.getResponse().getContentAsByteArray();
                metrics.recordSuccess(fileId, duration, content.length);
                LOGGER.debug("‚úÖ –§–∞–π–ª {} –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {} –º—Å ({} –±–∞–π—Ç)", fileId, duration, content.length);
            } else {
                String errorMessage = String.format("HTTP %d: %s", status, result.getResponse().getErrorMessage());
                metrics.recordFailure(fileId, duration, errorMessage);
                LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {}: {}", fileId, errorMessage);
            }
            
        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            String errorMessage = e.getClass().getSimpleName() + ": " + e.getMessage();
            metrics.recordFailure(fileId, duration, errorMessage);
            LOGGER.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {}: {}", fileId, e.getMessage());
        }
    }
    
    /**
     * –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –æ—Ç—á–µ—Ç—É Allure
     */
    private void attachStatisticsToAllure(LoadMetrics.Statistics stats, LoadMetrics metrics, 
                                         long stickerSetsLoadTime, long overallDuration) {
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Allure.addAttachment("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "text/plain", stats.toFormattedString());
        
        // JSON —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        try {
            String statsJson = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(stats);
            Allure.addAttachment("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (JSON)", "application/json", statsJson, "json");
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ JSON", e);
        }
        
        // –¢–æ–ø-10 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        List<LoadMetrics.FileLoadResult> slowest = metrics.getSlowestFiles(10);
        if (!slowest.isEmpty()) {
            StringBuilder sb = new StringBuilder();
            sb.append("TOP-10 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:\n\n");
            for (int i = 0; i < slowest.size(); i++) {
                LoadMetrics.FileLoadResult file = slowest.get(i);
                sb.append(String.format("%d. %s - %d –º—Å (%s)\n", 
                        i + 1, file.getFileId(), file.getDurationMs(), file.getSpeedKbps()));
            }
            Allure.addAttachment("üêå –¢–æ–ø-10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", "text/plain", sb.toString());
        }
        
        // –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        List<LoadMetrics.FileLoadResult> failed = metrics.getFailedLoads();
        if (!failed.isEmpty()) {
            StringBuilder sb = new StringBuilder();
            sb.append("‚ùå –û–®–ò–ë–ö–ò –ó–ê–ì–†–£–ó–ö–ò (").append(failed.size()).append(" —Ñ–∞–π–ª–æ–≤):\n\n");
            for (LoadMetrics.FileLoadResult file : failed) {
                sb.append(String.format("File ID: %s\n", file.getFileId()));
                sb.append(String.format("–í—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏: %d –º—Å\n", file.getDurationMs()));
                sb.append(String.format("–û—à–∏–±–∫–∞: %s\n", file.getErrorMessage()));
                sb.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");
            }
            Allure.addAttachment("‚ùå –û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏", "text/plain", sb.toString());
        }
        
        // –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        StringBuilder summary = new StringBuilder();
        summary.append("–°–í–û–î–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n");
        summary.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n");
        summary.append(String.format("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤:  %d –º—Å\n", stickerSetsLoadTime));
        summary.append(String.format("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤:     %d –º—Å\n", stats.getTotalDurationMs()));
        summary.append(String.format("–û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞:            %d –º—Å\n", overallDuration));
        summary.append(String.format("\n–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:                 %d\n", stats.getTotalRequests()));
        summary.append(String.format("–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:            %d (%.1f%%)\n", 
                stats.getSuccessCount(), stats.getSuccessRate()));
        summary.append(String.format("–û—à–∏–±–æ–∫:                       %d\n", stats.getFailureCount()));
        
        Allure.addAttachment("üìã –°–≤–æ–¥–∫–∞", "text/plain", summary.toString());
    }
}

