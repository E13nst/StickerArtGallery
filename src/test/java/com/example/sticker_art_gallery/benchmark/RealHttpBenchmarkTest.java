package com.example.sticker_art_gallery.benchmark;

import io.qameta.allure.*;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.concurrent.*;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.*;

/**
 * –ë–µ–Ω—á–º–∞—Ä–∫-—Ç–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RestAssured –¥–ª—è –†–ï–ê–õ–¨–ù–û–ì–û HTTP —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * ‚ö° –û–¢–õ–ò–ß–ò–Ø –û–¢ GalleryLoadBenchmarkTest:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç RestAssured –≤–º–µ—Å—Ç–æ MockMvc
 * - –†–∞–±–æ—Ç–∞–µ—Ç —Å –ñ–ò–í–´–ú –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ HTTP
 * - –ò–∑–º–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–µ—Ç–∏
 * - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * üìã –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
 * - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8080
 * - Redis –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
 * - STICKER_CACHE_ENABLED=true
 */
@Epic("–ë–µ–Ω—á–º–∞—Ä–∫ —Ç–µ—Å—Ç—ã")
@Feature("Real HTTP –±–µ–Ω—á–º–∞—Ä–∫ —Å RestAssured")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@Tag("benchmark")  // –ò—Å–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑ CI/CD, —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
public class RealHttpBenchmarkTest {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(RealHttpBenchmarkTest.class);
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞
    private static final String BASE_URL = "http://localhost:8080";
    private static final int STICKERSETS_TO_LOAD = 20;
    private static final int STICKERS_PER_SET = 4;
    private static final int THREAD_POOL_SIZE = 10;
    private static final int TIMEOUT_SECONDS = 120;
    
    private List<String> testFileIds;
    
    @BeforeAll
    @Step("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    public void setUp() {
        LOGGER.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Real HTTP Benchmark...");
        
        RestAssured.baseURI = BASE_URL;
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        Response healthCheck = given()
                .when()
                .get("/actuator/health")
                .then()
                .extract().response();
        
        if (healthCheck.statusCode() != 200) {
            fail("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ " + BASE_URL + ". –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: make start");
        }
        
        LOGGER.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: {}", BASE_URL);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
        testFileIds = loadTestFileIds();
        
        LOGGER.info("‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {} file_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", testFileIds.size());
        Allure.addAttachment("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤", "text/plain", 
                testFileIds.size() + " —Ñ–∞–π–ª–æ–≤");
    }
    
    @Test
    @Order(1)
    @Story("–•–æ–ª–æ–¥–Ω—ã–π –∫–µ—à: –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
    @DisplayName("üìä –ë–µ–Ω—á–º–∞—Ä–∫ #1: –•–æ–ª–æ–¥–Ω—ã–π –∫–µ—à (Cache MISS)")
    @Description("–ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ –∫–µ—à–∞)")
    @Severity(SeverityLevel.CRITICAL)
    public void benchmark01_coldCache() {
        LOGGER.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        LOGGER.info("‚ùÑÔ∏è  –ë–ï–ù–ß–ú–ê–†–ö #1: –•–û–õ–û–î–ù–´–ô –ö–ï–®");
        LOGGER.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        
        LoadMetrics metrics = runBenchmark("–•–æ–ª–æ–¥–Ω—ã–π –∫–µ—à");
        
        LoadMetrics.Statistics stats = metrics.getStatistics();
        attachStatisticsToAllure("–•–æ–ª–æ–¥–Ω—ã–π –∫–µ—à", stats);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        assertTrue(stats.getSuccessRate() > 90.0, 
                "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 90%, –ø–æ–ª—É—á–µ–Ω–æ: " + stats.getSuccessRate() + "%");
        
        LOGGER.info("‚úÖ –•–æ–ª–æ–¥–Ω—ã–π –∫–µ—à: avg={} –º—Å, p95={} –º—Å, throughput={} req/s",
                String.format("%.2f", stats.getAvgMs()),
                String.format("%.2f", stats.getP95Ms()),
                String.format("%.2f", stats.getThroughputRps()));
    }
    
    @Test
    @Order(2)
    @Story("–ì–æ—Ä—è—á–∏–π –∫–µ—à: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
    @DisplayName("üìä –ë–µ–Ω—á–º–∞—Ä–∫ #2: –ì–æ—Ä—è—á–∏–π –∫–µ—à (Cache HIT)")
    @Description("–ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ (—Å –∫–µ—à–µ–º)")
    @Severity(SeverityLevel.CRITICAL)
    public void benchmark02_hotCache() {
        LOGGER.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        LOGGER.info("üî• –ë–ï–ù–ß–ú–ê–†–ö #2: –ì–û–†–Ø–ß–ò–ô –ö–ï–®");
        LOGGER.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        
        LoadMetrics metrics = runBenchmark("–ì–æ—Ä—è—á–∏–π –∫–µ—à");
        
        LoadMetrics.Statistics stats = metrics.getStatistics();
        attachStatisticsToAllure("–ì–æ—Ä—è—á–∏–π –∫–µ—à", stats);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        assertTrue(stats.getSuccessRate() > 90.0,
                "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 90%, –ø–æ–ª—É—á–µ–Ω–æ: " + stats.getSuccessRate() + "%");
        
        // –ì–æ—Ä—è—á–∏–π –∫–µ—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ (—Ö–æ—Ç—è –±—ã –Ω–µ–º–Ω–æ–≥–æ)
        // –†–µ–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç hit rate –∫–µ—à–∞
        
        LOGGER.info("‚úÖ –ì–æ—Ä—è—á–∏–π –∫–µ—à: avg={} –º—Å, p95={} –º—Å, throughput={} req/s",
                String.format("%.2f", stats.getAvgMs()),
                String.format("%.2f", stats.getP95Ms()),
                String.format("%.2f", stats.getThroughputRps()));
    }
    
    @Test
    @Order(3)
    @Story("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞")
    @DisplayName("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis –∫–µ—à–∞")
    @Description("–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ –ø–æ—Å–ª–µ –±–µ–Ω—á–º–∞—Ä–∫–∞")
    @Severity(SeverityLevel.NORMAL)
    public void benchmark03_cacheStats() {
        LOGGER.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        LOGGER.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ï–®–ê –ü–û–°–õ–ï –ë–ï–ù–ß–ú–ê–†–ö–ê");
        LOGGER.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        
        Allure.step("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞", () -> {
            Response response = given()
                    .when()
                    .get("/api/stickers/cache/stats")
                    .then()
                    .statusCode(200)
                    .extract().response();
            
            String stats = response.prettyPrint();
            LOGGER.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞:\n{}", stats);
            
            Allure.addAttachment("Cache Statistics (JSON)", "application/json", 
                    response.asPrettyString());
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            boolean cacheEnabled = response.jsonPath().getBoolean("cacheEnabled");
            boolean redisAvailable = response.jsonPath().getBoolean("redisAvailable");
            String hitRate = response.jsonPath().getString("hitRatePercent");
            Integer cacheHits = response.jsonPath().getInt("metrics.cacheHits");
            Integer cacheMisses = response.jsonPath().getInt("metrics.cacheMisses");
            
            LOGGER.info("‚úÖ Cache Enabled: {}", cacheEnabled);
            LOGGER.info("‚úÖ Redis Available: {}", redisAvailable);
            LOGGER.info("‚úÖ Hit Rate: {}", hitRate);
            LOGGER.info("‚úÖ Cache Hits: {}", cacheHits);
            LOGGER.info("‚úÖ Cache Misses: {}", cacheMisses);
            
            assertTrue(cacheEnabled, "–ö–µ—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω");
            assertTrue(redisAvailable, "Redis –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω");
        });
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ file_id –∏–∑ API
     */
    private List<String> loadTestFileIds() {
        return Allure.step("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö file_id –∏–∑ API", () -> {
            Response response = given()
                    .queryParam("page", 0)
                    .queryParam("size", STICKERSETS_TO_LOAD)
                    .when()
                    .get("/api/stickersets")
                    .then()
                    .statusCode(200)
                    .extract().response();
            
            List<Map<String, Object>> stickerSets = response.jsonPath().getList("content");
            List<String> fileIds = new ArrayList<>();
            Random random = new Random(42); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed
            
            for (Map<String, Object> stickerSet : stickerSets) {
                Map<String, Object> telegramInfo = (Map<String, Object>) stickerSet.get("telegramStickerSetInfo");
                if (telegramInfo == null) continue;
                
                List<Map<String, Object>> stickers = (List<Map<String, Object>>) telegramInfo.get("stickers");
                if (stickers == null || stickers.isEmpty()) continue;
                
                // –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
                List<Map<String, Object>> shuffled = new ArrayList<>(stickers);
                Collections.shuffle(shuffled, random);
                
                int count = Math.min(STICKERS_PER_SET, shuffled.size());
                for (int i = 0; i < count; i++) {
                    Map<String, Object> sticker = shuffled.get(i);
                    String fileId = (String) sticker.get("file_id");
                    if (fileId != null && !fileId.isEmpty()) {
                        fileIds.add(fileId);
                    }
                }
            }
            
            return fileIds;
        });
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
     */
    private LoadMetrics runBenchmark(String benchmarkName) {
        LoadMetrics metrics = new LoadMetrics();
        
        Allure.step("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ " + testFileIds.size() + " —Ñ–∞–π–ª–æ–≤", () -> {
            ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);
            List<CompletableFuture<Void>> futures = new ArrayList<>();
            
            for (String fileId : testFileIds) {
                CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                    loadFileWithRestAssured(fileId, metrics);
                }, executorService);
                
                futures.add(future);
            }
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try {
                CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
                        .get(TIMEOUT_SECONDS, TimeUnit.SECONDS);
            } catch (TimeoutException e) {
                LOGGER.error("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç: {} —Å–µ–∫—É–Ω–¥", TIMEOUT_SECONDS);
                fail("Timeout");
            } catch (Exception e) {
                LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞: {}", e.getMessage());
                fail("Error: " + e.getMessage());
            } finally {
                executorService.shutdown();
            }
        });
        
        metrics.finish();
        return metrics;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ RestAssured
     */
    private void loadFileWithRestAssured(String fileId, LoadMetrics metrics) {
        long startTime = System.currentTimeMillis();
        
        try {
            Response response = given()
                    .when()
                    .get("/api/stickers/" + fileId);
            
            long duration = System.currentTimeMillis() - startTime;
            
            if (response.statusCode() == 200) {
                byte[] content = response.asByteArray();
                metrics.recordSuccess(fileId, duration, content.length);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ X-Cache header
                String cacheHeader = response.header("X-Cache");
                if (cacheHeader != null) {
                    LOGGER.debug("‚úÖ {} –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {} –º—Å ({} –±–∞–π—Ç) [Cache: {}]", 
                            fileId, duration, content.length, cacheHeader);
                } else {
                    LOGGER.debug("‚úÖ {} –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {} –º—Å ({} –±–∞–π—Ç)", 
                            fileId, duration, content.length);
                }
            } else {
                String errorMessage = String.format("HTTP %d", response.statusCode());
                metrics.recordFailure(fileId, duration, errorMessage);
                LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {}: {}", fileId, errorMessage);
            }
            
        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            metrics.recordFailure(fileId, duration, e.getMessage());
            LOGGER.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {}: {}", fileId, e.getMessage());
        }
    }
    
    /**
     * –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ Allure –æ—Ç—á–µ—Ç—É
     */
    private void attachStatisticsToAllure(String name, LoadMetrics.Statistics stats) {
        // JSON —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        String json = String.format("""
                {
                  "total": %d,
                  "successful": %d,
                  "failed": %d,
                  "successRate": %.2f,
                  "duration": %d,
                  "throughput": %.2f,
                  "latency": {
                    "min": %.2f,
                    "max": %.2f,
                    "avg": %.2f,
                    "median": %.2f,
                    "p95": %.2f,
                    "p99": %.2f,
                    "stdDev": %.2f
                  },
                  "data": {
                    "totalBytes": %d,
                    "avgFileSize": %d
                  }
                }
                """,
                stats.getTotalRequests(), stats.getSuccessCount(), stats.getFailureCount(),
                stats.getSuccessRate(), stats.getTotalDurationMs(), stats.getThroughputRps(),
                (double) stats.getMinMs(), (double) stats.getMaxMs(), stats.getAvgMs(), stats.getMedianMs(),
                stats.getP95Ms(), stats.getP99Ms(), stats.getStdDevMs(),
                stats.getTotalBytes(), stats.getAvgBytesPerFile());
        
        Allure.addAttachment(name + " - Statistics (JSON)", "application/json", json);
        
        // –ö—Ä–∞—Å–∏–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
        String table = String.format("""
                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
                ‚ïë                    %s                                        
                ‚ïë –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:           %d (‚úÖ %d | ‚ùå %d)                 
                ‚ïë –£—Å–ø–µ—à–Ω–æ—Å—Ç—å:            %.1f%%                                
                ‚ïë –û–±—â–µ–µ –≤—Ä–µ–º—è:           %d –º—Å                                 
                ‚ïë –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: %.2f –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫                   
                ‚ïë –ú–∏–Ω. –≤—Ä–µ–º—è:            %.0f –º—Å                               
                ‚ïë –ú–∞–∫—Å. –≤—Ä–µ–º—è:           %.0f –º—Å                               
                ‚ïë –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:         %.2f –º—Å                               
                ‚ïë –ú–µ–¥–∏–∞–Ω–∞ (p50):         %.2f –º—Å                               
                ‚ïë 95 –ø–µ—Ä—Å–µ–Ω—Ç–∏–ª—å:         %.2f –º—Å                               
                ‚ïë 99 –ø–µ—Ä—Å–µ–Ω—Ç–∏–ª—å:         %.2f –º—Å                               
                ‚ïë –°—Ç–∞–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:     %.2f –º—Å                               
                ‚ïë –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:       %.2f MB                               
                ‚ïë –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:  %.2f KB                               
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                """,
                name.toUpperCase(),
                stats.getTotalRequests(), stats.getSuccessCount(), stats.getFailureCount(),
                stats.getSuccessRate(),
                stats.getTotalDurationMs(),
                stats.getThroughputRps(),
                (double) stats.getMinMs(), (double) stats.getMaxMs(),
                stats.getAvgMs(),
                stats.getMedianMs(),
                stats.getP95Ms(),
                stats.getP99Ms(),
                stats.getStdDevMs(),
                stats.getTotalBytes() / (1024.0 * 1024.0),
                stats.getAvgBytesPerFile() / 1024.0);
        
        Allure.addAttachment(name + " - Statistics", "text/plain", table);
        LOGGER.info("\n{}", table);
    }
}

