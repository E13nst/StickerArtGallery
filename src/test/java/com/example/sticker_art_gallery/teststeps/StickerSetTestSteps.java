package com.example.sticker_art_gallery.teststeps;

import com.example.sticker_art_gallery.config.AppConfig;
import com.example.sticker_art_gallery.dto.CreateStickerSetDto;
import com.example.sticker_art_gallery.model.profile.UserProfileEntity;
import com.example.sticker_art_gallery.model.profile.UserProfileRepository;
import com.example.sticker_art_gallery.model.telegram.StickerSetRepository;
import com.example.sticker_art_gallery.model.user.UserEntity;
import com.example.sticker_art_gallery.model.user.UserRepository;
import com.example.sticker_art_gallery.testdata.TestDataBuilder;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.qameta.allure.Step;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;

import java.util.List;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

/**
 * –û–±—â–∏–µ —à–∞–≥–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 * –í—ã–¥–µ–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å @Step –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
 */
@Component
public class StickerSetTestSteps {
    
    @Autowired
    private MockMvc mockMvc;
    
    @Autowired
    private ObjectMapper objectMapper;
    
    @Autowired
    private AppConfig appConfig;
    
    @Autowired
    private StickerSetRepository stickerSetRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private UserProfileRepository userProfileRepository;
    
    // Setter –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    public void setMockMvc(MockMvc mockMvc) {
        this.mockMvc = mockMvc;
    }
    
    public void setObjectMapper(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }
    
    public void setAppConfig(AppConfig appConfig) {
        this.appConfig = appConfig;
    }
    
    public void setStickerSetRepository(StickerSetRepository stickerSetRepository) {
        this.stickerSetRepository = stickerSetRepository;
    }
    
    public void setUserRepository(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
    
    public void setUserProfileRepository(UserProfileRepository userProfileRepository) {
        this.userProfileRepository = userProfileRepository;
    }
    
    @Step("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª—å")
    public void createTestUserAndProfile(Long userId) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!userRepository.existsById(userId)) {
            UserEntity user = TestDataBuilder.createTestUser(userId);
            userRepository.save(user);
            System.out.println("üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + userId);
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!userProfileRepository.existsByUserId(userId)) {
            UserProfileEntity profile = TestDataBuilder.createTestUserProfile(userId);
            userProfileRepository.save(profile);
            System.out.println("üìã –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userId);
        }
    }
    
    @Step("–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    public void cleanupTestData() {
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º findAll() –≤–º–µ—Å—Ç–æ findByNameIgnoreCase()
        for (String name : TestDataBuilder.TEST_STICKER_SETS) {
            List<com.example.sticker_art_gallery.model.telegram.StickerSet> stickerSets = 
                stickerSetRepository.findAll().stream()
                    .filter(s -> s.getName().equalsIgnoreCase(name))
                    .collect(java.util.stream.Collectors.toList());
            
            for (com.example.sticker_art_gallery.model.telegram.StickerSet s : stickerSets) {
                System.out.println("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç: " + name + " (ID: " + s.getId() + ")");
                stickerSetRepository.delete(s);
            }
        }
    }
    
    @Step("–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç —á–µ—Ä–µ–∑ API")
    public ResultActions createStickerSet(CreateStickerSetDto createDto, String initData) throws Exception {
        return mockMvc.perform(post("/api/stickersets")
                        .header("X-Telegram-Init-Data", initData)
                        .header("X-Telegram-Bot-Name", TestDataBuilder.BOT_NAME)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createDto)));
    }
    
    @Step("–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —á–µ—Ä–µ–∑ API")
    public ResultActions getAllStickerSets(String initData) throws Exception {
        return mockMvc.perform(get("/api/stickersets")
                        .header("X-Telegram-Init-Data", initData)
                        .header("X-Telegram-Bot-Name", TestDataBuilder.BOT_NAME));
    }
    
    @Step("–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–Ω—É—Ç—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —á–µ—Ä–µ–∑ API")
    public ResultActions getLikedStickerSets(String initData) throws Exception {
        return mockMvc.perform(get("/api/stickersets")
                        .param("likedOnly", "true")
                        .header("X-Telegram-Init-Data", initData)
                        .header("X-Telegram-Bot-Name", TestDataBuilder.BOT_NAME));
    }
    
    @Step("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ ID —á–µ—Ä–µ–∑ API")
    public ResultActions getStickerSetById(Long id, String initData) throws Exception {
        return mockMvc.perform(get("/api/stickersets/" + id)
                        .header("X-Telegram-Init-Data", initData)
                        .header("X-Telegram-Bot-Name", TestDataBuilder.BOT_NAME));
    }
    
    @Step("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    public ResultActions getStickerSetsByCategory(String categoryKeys, String initData) throws Exception {
        return mockMvc.perform(get("/api/stickersets")
                        .param("categoryKeys", categoryKeys)
                        .header("X-Telegram-Init-Data", initData)
                        .header("X-Telegram-Bot-Name", TestDataBuilder.BOT_NAME));
    }
    
    @Step("–°–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–Ω—É—é initData")
    public String createValidInitData(Long userId) {
        String botToken = appConfig.getTelegram().getBotToken();
        return TestDataBuilder.createValidInitData(botToken, userId);
    }
    
    @Step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞")
    public void verifyStickerSetCreated(ResultActions result, String expectedName, Long expectedUserId) throws Exception {
        result.andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.status().isCreated())
                .andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath("$.id").exists())
                .andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath("$.name").value(expectedName))
                .andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath("$.userId").value(expectedUserId))
                .andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath("$.createdAt").exists());
    }
    
    @Step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    public void verifyValidationError(ResultActions result) throws Exception {
        result.andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.status().isBadRequest())
                .andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath("$.error").exists())
                .andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath("$.message").exists());
    }
    
    @Step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    public void verifyUnauthorizedError(ResultActions result) throws Exception {
        result.andExpect(org.springframework.test.web.servlet.result.MockMvcResultMatchers.status().isUnauthorized());
    }
}
