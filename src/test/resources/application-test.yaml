server:
  port: 0  # Случайный порт для тестов

spring:
  application:
    name: sticker-art-gallery-test
  
  # PostgreSQL база (используем продакшен БД с переменными окружения)
  datasource:
    url: jdbc:postgresql://${DB_HOST:amvera-e13nst-run-postgres}:${DB_PORT:5432}/${DB_NAME:mindbase}
    username: ${DB_USERNAME:dalek}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: validate  # Используем существующую схему через Flyway
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  
  # Flyway для миграций
  flyway:
    enabled: true
    validate-on-migrate: true
    baseline-on-migrate: true
  
  # Redis (используем продакшен или локальный)
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
  cache:
    type: redis
  
  # Spring AI с реальным ключом
  ai:
    openai:
      api-key: ${OPENAI_API_KEY:test-key}
      chat:
        options:
          model: gpt-4o
          temperature: 0.7
          max-tokens: 1000

# Тестовые настройки приложения (используем реальные токены из переменных окружения)
app:
  url: ${APP_URL:http://localhost:8080}
  mini-app:
    url: ${MINI_APP_URL:${app.url}/mini-app/}
  telegram:
    bot-token: ${TELEGRAM_BOT_TOKEN}

# Sticker processor service URL (используем реальный продакшен сервис)
sticker:
  processor:
    url: ${STICKER_PROCESSOR_URL:https://sticker-processor-e13nst.amvera.io}

telegram:
  bot:
    token: ${TELEGRAM_API_TOKEN:${app.telegram.bot-token}}
    name: ${TELEGRAM_BOT_NAME:StickerGallery}
    webhook:
      url: ${BOT_WEBHOOK_URL:http://localhost:8080/webhook}

# Логирование для тестов
logging:
  level:
    root: WARN
    com.example.sticker_art_gallery: INFO
    org.springframework: WARN
    org.hibernate: WARN
