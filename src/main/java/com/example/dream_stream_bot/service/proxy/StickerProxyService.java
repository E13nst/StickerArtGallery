package com.example.dream_stream_bot.service.proxy;

import com.example.dream_stream_bot.service.metrics.StickerProxyMetrics;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestTemplate;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É —Å—Ç–∏–∫–µ—Ä–æ–≤
 */
@Service
public class StickerProxyService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerProxyService.class);
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
    // private static final String CACHE_KEY_PREFIX = "sticker:file:";
    // private static final long CACHE_TTL_DAYS = 7; // 7 –¥–Ω–µ–π
    
    @Value("${STICKER_PROCESSOR_URL}")
    private String stickerProcessorUrl;
    
    private final RestTemplate restTemplate;
    private final StickerProxyMetrics metrics;
    
    @Autowired
    public StickerProxyService(RestTemplate restTemplate, StickerProxyMetrics metrics) {
        this.restTemplate = restTemplate;
        this.metrics = metrics;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä (–ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    public ResponseEntity<Object> getSticker(String fileId) {
        LOGGER.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ '{}' —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏", fileId);
        metrics.incrementTotalRequests();
        
        // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É
        try {
            String url = stickerProcessorUrl + "/stickers/" + fileId;
            LOGGER.debug("üåê –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫: {}", url);
            metrics.incrementProxyRequests();
            
            ResponseEntity<byte[]> response = restTemplate.getForEntity(url, byte[].class);
            
            LOGGER.info("‚úÖ –ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: fileId={}, status={}, size={} bytes", 
                       fileId, response.getStatusCode(), response.getBody().length);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –∑–∞–≥–æ–ª–æ–≤–æ–∫
            String contentType = response.getHeaders().getFirst("Content-Type");
            LOGGER.debug("üìÑ Content-Type: {}", contentType);
            
            if (contentType != null && contentType.contains("application/json")) {
                // –≠—Ç–æ JSON (Lottie –∞–Ω–∏–º–∞—Ü–∏—è) - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø–∞—Ä—Å–∏–º
                try {
                    String jsonString = new String(response.getBody(), "UTF-8");
                    Object jsonObject = new com.fasterxml.jackson.databind.ObjectMapper().readValue(jsonString, Object.class);
                    return ResponseEntity.ok(jsonObject);
                } catch (Exception e) {
                    LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è '{}': {}", fileId, e.getMessage());
                    metrics.incrementErrors();
                    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("JSON parsing error");
                }
            } else {
                // –≠—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
                LOGGER.debug("üñºÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è '{}'", fileId);
                return ResponseEntity.ok()
                    .header("Content-Type", contentType != null ? contentType : "image/webp")
                    .body(response.getBody());
            }
            
        } catch (HttpClientErrorException e) {
            LOGGER.warn("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ '{}': {} {}", fileId, e.getStatusCode(), e.getMessage());
            metrics.incrementErrors();
            return ResponseEntity.status(e.getStatusCode()).body(e.getResponseBodyAsString());
            
        } catch (HttpServerErrorException e) {
            LOGGER.error("‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ '{}': {} {}", fileId, e.getStatusCode(), e.getMessage());
            metrics.incrementErrors();
            return ResponseEntity.status(e.getStatusCode()).body(e.getResponseBodyAsString());
            
        } catch (ResourceAccessException e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ '{}': {}", fileId, e.getMessage());
            metrics.incrementErrors();
            return ResponseEntity.status(HttpStatus.BAD_GATEWAY).body("Service unavailable");
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ '{}': {}", fileId, e.getMessage(), e);
            metrics.incrementErrors();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Internal server error");
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ (–ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ)
     */
    public ResponseEntity<Object> getCacheStats() {
        LOGGER.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏");
        metrics.incrementCacheStatsRequests();
        
        try {
            String url = stickerProcessorUrl + "/cache/stats";
            LOGGER.debug("üåê –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫: {}", url);
            
            ResponseEntity<Object> response = restTemplate.getForEntity(url, Object.class);
            
            LOGGER.info("‚úÖ –ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω: status={}", response.getStatusCode());
            return response;
            
        } catch (HttpClientErrorException e) {
            LOGGER.warn("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {} {}", e.getStatusCode(), e.getMessage());
            metrics.incrementCacheStatsErrors();
            return ResponseEntity.status(e.getStatusCode()).body(e.getResponseBodyAsString());
            
        } catch (HttpServerErrorException e) {
            LOGGER.error("‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {} {}", e.getStatusCode(), e.getMessage());
            metrics.incrementCacheStatsErrors();
            return ResponseEntity.status(e.getStatusCode()).body(e.getResponseBodyAsString());
            
        } catch (ResourceAccessException e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage());
            metrics.incrementCacheStatsErrors();
            return ResponseEntity.status(HttpStatus.BAD_GATEWAY).body("Service unavailable");
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage(), e);
            metrics.incrementCacheStatsErrors();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Internal server error");
        }
    }
}
