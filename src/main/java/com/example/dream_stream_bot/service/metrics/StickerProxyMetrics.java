package com.example.dream_stream_bot.service.metrics;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.concurrent.atomic.AtomicLong;

/**
 * –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–æ–≤
 */
@Component
public class StickerProxyMetrics {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerProxyMetrics.class);
    
    // –°—á–µ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    private final AtomicLong totalRequests = new AtomicLong(0);
    private final AtomicLong cacheHits = new AtomicLong(0);
    private final AtomicLong cacheMisses = new AtomicLong(0);
    private final AtomicLong proxyRequests = new AtomicLong(0);
    private final AtomicLong errors = new AtomicLong(0);
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
    private final AtomicLong cacheStatsRequests = new AtomicLong(0);
    private final AtomicLong cacheStatsErrors = new AtomicLong(0);
    
    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    public void incrementTotalRequests() {
        long count = totalRequests.incrementAndGet();
        LOGGER.debug("üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", count);
    }
    
    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à
     */
    public void incrementCacheHits() {
        long count = cacheHits.incrementAndGet();
        LOGGER.debug("üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {}", count);
    }
    
    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞
     */
    public void incrementCacheMisses() {
        long count = cacheMisses.incrementAndGet();
        LOGGER.debug("‚ùå –ü—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞: {}", count);
    }
    
    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–æ–≤
     */
    public void incrementProxyRequests() {
        long count = proxyRequests.incrementAndGet();
        LOGGER.debug("üåê –ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–æ–≤: {}", count);
    }
    
    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
     */
    public void incrementErrors() {
        long count = errors.incrementAndGet();
        LOGGER.warn("‚ùå –û—à–∏–±–æ–∫: {}", count);
    }
    
    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    public void incrementCacheStatsRequests() {
        long count = cacheStatsRequests.incrementAndGet();
        LOGGER.debug("üìä –ó–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", count);
    }
    
    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    public void incrementCacheStatsErrors() {
        long count = cacheStatsErrors.incrementAndGet();
        LOGGER.warn("‚ùå –û—à–∏–±–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", count);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ç—Ä–∏–∫
     */
    public MetricsStats getStats() {
        long total = totalRequests.get();
        long hits = cacheHits.get();
        long misses = cacheMisses.get();
        long proxy = proxyRequests.get();
        long errorCount = errors.get();
        long cacheStats = cacheStatsRequests.get();
        long cacheStatsErrorCount = cacheStatsErrors.get();
        
        double hitRate = total > 0 ? (double) hits / total * 100 : 0.0;
        
        return new MetricsStats(
            total, hits, misses, proxy, errorCount, 
            cacheStats, cacheStatsErrorCount, hitRate
        );
    }
    
    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    public void logStats() {
        MetricsStats stats = getStats();
        LOGGER.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–æ–≤:");
        LOGGER.info("   –û–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã: {}", stats.totalRequests());
        LOGGER.info("   –ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à: {} ({}%)", stats.cacheHits(), String.format("%.2f", stats.hitRate()));
        LOGGER.info("   –ü—Ä–æ–º–∞—Ö–∏ –∫—ç—à–∞: {}", stats.cacheMisses());
        LOGGER.info("   –ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å—ã: {}", stats.proxyRequests());
        LOGGER.info("   –û—à–∏–±–∫–∏: {}", stats.errors());
        LOGGER.info("   –ó–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", stats.cacheStatsRequests());
        LOGGER.info("   –û—à–∏–±–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", stats.cacheStatsErrors());
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
     */
    public void reset() {
        totalRequests.set(0);
        cacheHits.set(0);
        cacheMisses.set(0);
        proxyRequests.set(0);
        errors.set(0);
        cacheStatsRequests.set(0);
        cacheStatsErrors.set(0);
        LOGGER.info("üîÑ –ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
    }
    
    /**
     * DTO –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ç—Ä–∏–∫
     */
    public record MetricsStats(
        long totalRequests,
        long cacheHits,
        long cacheMisses,
        long proxyRequests,
        long errors,
        long cacheStatsRequests,
        long cacheStatsErrors,
        double hitRate
    ) {}
}
