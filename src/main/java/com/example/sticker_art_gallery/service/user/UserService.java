package com.example.sticker_art_gallery.service.user;

import com.example.sticker_art_gallery.dto.UserDto;
import com.example.sticker_art_gallery.model.user.UserEntity;
import com.example.sticker_art_gallery.model.user.UserRepository;
import com.example.sticker_art_gallery.service.telegram.TelegramBotApiService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∫—ç—à –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram)
 */
@Service
@Transactional
public class UserService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class);
    
    private final UserRepository userRepository;
    private final TelegramBotApiService telegramBotApiService;
    
    @Autowired
    public UserService(UserRepository userRepository, TelegramBotApiService telegramBotApiService) {
        this.userRepository = userRepository;
        this.telegramBotApiService = telegramBotApiService;
    }
    
    /**
     * –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    public UserEntity upsertFromTelegramData(Long telegramId, String firstName, String lastName, 
                                            String username, String languageCode, Boolean isPremium) {
        LOGGER.debug("üîç –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: {}", telegramId);
        
        Optional<UserEntity> existingUser = userRepository.findById(telegramId);
        
        UserEntity user;
        if (existingUser.isPresent()) {
            user = existingUser.get();
            LOGGER.debug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ", user.getUsername());
        } else {
            user = new UserEntity(telegramId);
            LOGGER.debug("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: {}", telegramId);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setUsername(username);
        user.setLanguageCode(languageCode);
        user.setIsPremium(isPremium);
        
        user = userRepository.save(user);
        LOGGER.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: id={}, username={}", user.getId(), user.getUsername());
        
        return user;
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     */
    public Optional<UserEntity> findById(Long id) {
        return userRepository.findById(id);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
     */
    public Optional<UserEntity> findByUsername(String username) {
        return userRepository.findByUsername(username);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public List<UserEntity> findAll() {
        return userRepository.findAll();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Bot API
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ç–æ –∏ file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
     */
    public Map<String, Object> getUserProfilePhoto(Long userId) {
        try {
            Object profilePhotosData = telegramBotApiService.getUserProfilePhotos(userId);
            
            if (profilePhotosData == null) {
                return null;
            }
            
            Map<String, Object> result = new HashMap<>();
            result.put("profilePhotos", profilePhotosData);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
            String largestPhotoFileId = extractLargestPhotoFileId(profilePhotosData);
            result.put("profilePhotoFileId", largestPhotoFileId);
            
            return result;
            
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}': {}", userId, e.getMessage());
            return null;
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ –∏–∑ profilePhotos
     */
    @SuppressWarnings("unchecked")
    private String extractLargestPhotoFileId(Object profilePhotosObj) {
        try {
            if (profilePhotosObj == null) {
                return null;
            }
            
            Map<String, Object> profilePhotos = (Map<String, Object>) profilePhotosObj;
            
            Object totalCountObj = profilePhotos.get("total_count");
            if (totalCountObj == null || ((Number) totalCountObj).intValue() == 0) {
                return null;
            }
            
            List<List<Map<String, Object>>> photos = (List<List<Map<String, Object>>>) profilePhotos.get("photos");
            if (photos == null || photos.isEmpty() || photos.get(0).isEmpty()) {
                return null;
            }
            
            List<Map<String, Object>> photoSizes = photos.get(0);
            
            Map<String, Object> largestPhoto = photoSizes.stream()
                    .max((p1, p2) -> {
                        int size1 = p1.get("file_size") != null ? ((Number) p1.get("file_size")).intValue() : 0;
                        int size2 = p2.get("file_size") != null ? ((Number) p2.get("file_size")).intValue() : 0;
                        return Integer.compare(size1, size2);
                    })
                    .orElse(null);
            
            if (largestPhoto != null && largestPhoto.get("file_id") != null) {
                return (String) largestPhoto.get("file_id");
            }
            
            return null;
            
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ file_id —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {}", e.getMessage());
            return null;
        }
    }
}

