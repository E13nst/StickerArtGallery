package com.example.sticker_art_gallery.service.user;

import com.example.sticker_art_gallery.dto.UserDto;
import com.example.sticker_art_gallery.model.user.UserEntity;
import com.example.sticker_art_gallery.model.user.UserRepository;
import com.example.sticker_art_gallery.service.telegram.TelegramBotApiService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
@Service
@Transactional
public class UserService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(UserService.class);
    
    private final UserRepository userRepository;
    private final TelegramBotApiService telegramBotApiService;
    private final ObjectMapper objectMapper;
    
    @Autowired
    public UserService(UserRepository userRepository, TelegramBotApiService telegramBotApiService, ObjectMapper objectMapper) {
        this.userRepository = userRepository;
        this.telegramBotApiService = telegramBotApiService;
        this.objectMapper = objectMapper;
    }
    
    /**
     * –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
     * 
     * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
     * @param username username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
     * @param firstName –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
     * @param lastName —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
     * @param avatarUrl URL –∞–≤–∞—Ç–∞—Ä–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
     * @return –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    public UserEntity findOrCreateByTelegramId(Long telegramId, String username, String firstName, 
                                             String lastName, String avatarUrl) {
        LOGGER.info("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id: {}", telegramId);
        
        Optional<UserEntity> existingUser = userRepository.findByTelegramId(telegramId);
        
        if (existingUser.isPresent()) {
            UserEntity user = existingUser.get();
            LOGGER.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}", user.getUsername());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            boolean updated = false;
            if (username != null && !username.equals(user.getUsername())) {
                user.setUsername(username);
                updated = true;
            }
            if (firstName != null && !firstName.equals(user.getFirstName())) {
                user.setFirstName(firstName);
                updated = true;
            }
            if (lastName != null && !lastName.equals(user.getLastName())) {
                user.setLastName(lastName);
                updated = true;
            }
            if (avatarUrl != null && !avatarUrl.equals(user.getAvatarUrl())) {
                user.setAvatarUrl(avatarUrl);
                updated = true;
            }
            
            if (updated) {
                user = userRepository.save(user);
                LOGGER.info("üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {}", user.getUsername());
            }
            
            return user;
        } else {
            LOGGER.info("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: {}", telegramId);
            
            UserEntity newUser = new UserEntity(telegramId, username, firstName, lastName, avatarUrl);
            newUser = userRepository.save(newUser);
            
            LOGGER.info("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {} (ID: {})", newUser.getUsername(), newUser.getId());
            return newUser;
        }
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
     */
    public Optional<UserEntity> findByTelegramId(Long telegramId) {
        return userRepository.findByTelegramId(telegramId);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     */
    public Optional<UserEntity> findById(Long id) {
        return userRepository.findById(id);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
     */
    public Optional<UserEntity> findByUsername(String username) {
        return userRepository.findByUsername(username);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public List<UserEntity> findAll() {
        return userRepository.findAll();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ DTO
     */
    public List<UserDto> findAllAsDto() {
        return userRepository.findAll().stream()
                .map(UserDto::fromEntity)
                .collect(Collectors.toList());
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public UserEntity save(UserEntity user) {
        return userRepository.save(user);
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     */
    public void deleteById(Long id) {
        userRepository.deleteById(id);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
     */
    public boolean existsByTelegramId(Long telegramId) {
        return userRepository.existsByTelegramId(telegramId);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏
     */
    public List<UserEntity> findByRole(UserEntity.UserRole role) {
        return userRepository.findByRole(role);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public UserEntity updateArtBalance(Long userId, Long newBalance) {
        Optional<UserEntity> userOpt = userRepository.findById(userId);
        if (userOpt.isPresent()) {
            UserEntity user = userOpt.get();
            user.setArtBalance(newBalance);
            return userRepository.save(user);
        }
        throw new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public UserEntity addToArtBalance(Long userId, Long amount) {
        Optional<UserEntity> userOpt = userRepository.findById(userId);
        if (userOpt.isPresent()) {
            UserEntity user = userOpt.get();
            user.setArtBalance(user.getArtBalance() + amount);
            return userRepository.save(user);
        }
        throw new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    /**
     * –û–±–æ–≥–∞—â–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bot API (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
     * –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DTO –±–µ–∑ –æ–±–æ–≥–∞—â–µ–Ω–∏—è, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
     */
    public UserDto enrichSingleUserSafely(UserEntity user) {
        UserDto dto = UserDto.fromEntity(user);
        
        // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ getChatMember
        try {
            Object botApiData = telegramBotApiService.getUserInfo(user.getId());
            dto.setTelegramUserInfo(botApiData);
            LOGGER.debug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' –æ–±–æ–≥–∞—â–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ Bot API (getChatMember)", user.getId());
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Bot API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}': {} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ", 
                    user.getId(), e.getMessage());
            dto.setTelegramUserInfo(null);
        }
        
        // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ getUserProfilePhotos
        try {
            Object profilePhotosData = telegramBotApiService.getUserProfilePhotos(user.getId());
            dto.setProfilePhotos(profilePhotosData);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
            String largestPhotoFileId = extractLargestPhotoFileId(profilePhotosData);
            dto.setProfilePhotoFileId(largestPhotoFileId);
            
            if (largestPhotoFileId != null) {
                LOGGER.debug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' –æ–±–æ–≥–∞—â–µ–Ω —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: file_id={}", user.getId(), largestPhotoFileId);
            } else {
                LOGGER.debug("üì∑ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}' –Ω–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", user.getId());
            }
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}': {} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", 
                    user.getId(), e.getMessage());
            dto.setProfilePhotos(null);
            dto.setProfilePhotoFileId(null);
        }
        
        return dto;
    }
    
    /**
     * –û–±–æ–≥–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bot API (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
     */
    public List<UserDto> enrichUsersSafely(List<UserEntity> users) {
        return users.stream()
                .map(this::enrichSingleUserSafely)
                .collect(Collectors.toList());
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ –∏–∑ profilePhotos
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
     */
    @SuppressWarnings("unchecked")
    private String extractLargestPhotoFileId(Object profilePhotosObj) {
        try {
            if (profilePhotosObj == null) {
                return null;
            }
            
            Map<String, Object> profilePhotos = (Map<String, Object>) profilePhotosObj;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º total_count
            Object totalCountObj = profilePhotos.get("total_count");
            if (totalCountObj == null || ((Number) totalCountObj).intValue() == 0) {
                LOGGER.debug("üì∑ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è");
                return null;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ photos
            List<List<Map<String, Object>>> photos = (List<List<Map<String, Object>>>) profilePhotos.get("photos");
            if (photos == null || photos.isEmpty() || photos.get(0).isEmpty()) {
                LOGGER.debug("üì∑ –ú–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ –ø—É—Å—Ç");
                return null;
            }
            
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–≤ (—ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            List<Map<String, Object>> photoSizes = photos.get(0);
            
            // –ò—â–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ –ø–æ file_size
            Map<String, Object> largestPhoto = photoSizes.stream()
                    .max((p1, p2) -> {
                        int size1 = p1.get("file_size") != null ? ((Number) p1.get("file_size")).intValue() : 0;
                        int size2 = p2.get("file_size") != null ? ((Number) p2.get("file_size")).intValue() : 0;
                        return Integer.compare(size1, size2);
                    })
                    .orElse(null);
            
            if (largestPhoto != null && largestPhoto.get("file_id") != null) {
                String fileId = (String) largestPhoto.get("file_id");
                LOGGER.debug("üì∑ –ù–∞–π–¥–µ–Ω–æ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ: file_id={}, size={}", 
                        fileId, largestPhoto.get("file_size"));
                return fileId;
            }
            
            return null;
            
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ file_id —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {} - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null", e.getMessage());
            return null;
        }
    }
}
