package com.example.sticker_art_gallery.service.file;

import com.example.sticker_art_gallery.dto.StickerCacheDto;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.concurrent.TimeUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ Redis
 */
@Service
public class StickerCacheService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerCacheService.class);
    private static final String CACHE_KEY_PREFIX = "sticker:file:";
    
    @org.springframework.beans.factory.annotation.Value("${app.sticker-cache.ttl-days:7}")
    private long cacheTtlDays;
    
    private final RedisTemplate<String, Object> redisTemplate;
    
    @Autowired
    public StickerCacheService(@Qualifier("stickerRedisTemplate") RedisTemplate<String, Object> redisTemplate) {
        this.redisTemplate = redisTemplate;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä –∏–∑ –∫—ç—à–∞ –ø–æ file_id
     * 
     * @param fileId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
     * @return StickerCacheDto –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    public StickerCacheDto get(String fileId) {
        LOGGER.debug("üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä '{}' –∏–∑ –∫—ç—à–∞", fileId);
        
        try {
            String key = buildCacheKey(fileId);
            Object cached = redisTemplate.opsForValue().get(key);
            
            if (cached instanceof StickerCacheDto stickerCache) {
                if (stickerCache.isExpired()) {
                    LOGGER.debug("‚è∞ –ö—ç—à —Å—Ç–∏–∫–µ—Ä–∞ '{}' —É—Å—Ç–∞—Ä–µ–ª, —É–¥–∞–ª—è–µ–º", fileId);
                    delete(fileId);
                    return null;
                }
                
                LOGGER.info("üéØ Cache HIT –¥–ª—è '{}' (size: {} bytes)", fileId, stickerCache.getFileSize());
                return stickerCache;
            }
            
            LOGGER.debug("‚ùå Cache MISS –¥–ª—è '{}'", fileId);
            return null;
            
        } catch (Exception e) {
            LOGGER.debug("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è '{}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à: {}", fileId, e.getMessage());
            return null; // Graceful degradation - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–µ—à–∞
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –≤ –∫—ç—à
     * 
     * @param stickerCache –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public void put(StickerCacheDto stickerCache) {
        if (stickerCache == null || stickerCache.getFileId() == null) {
            return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º null
        }
        
        try {
            String key = buildCacheKey(stickerCache.getFileId());
            redisTemplate.opsForValue().set(key, stickerCache, cacheTtlDays, TimeUnit.DAYS);
            LOGGER.debug("üíæ –ö—ç—à –¥–ª—è '{}' (size: {} bytes, TTL: {} days)", 
                    stickerCache.getFileId(), stickerCache.getFileSize(), cacheTtlDays);
            
        } catch (Exception e) {
            LOGGER.debug("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à –¥–ª—è '{}': {}", 
                    stickerCache.getFileId(), e.getMessage());
            // Graceful degradation - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–µ—à–∞
        }
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –∏–∑ –∫—ç—à–∞
     * 
     * @param fileId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
     */
    public void delete(String fileId) {
        try {
            String key = buildCacheKey(fileId);
            redisTemplate.delete(key);
        } catch (Exception e) {
            LOGGER.debug("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è delete('{}'): {}", fileId, e.getMessage());
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –≤ –∫—ç—à–µ
     * 
     * @param fileId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
     * @return true –µ—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ
     */
    public boolean exists(String fileId) {
        try {
            String key = buildCacheKey(fileId);
            Boolean exists = redisTemplate.hasKey(key);
            return Boolean.TRUE.equals(exists);
            
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤)
     * 
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
     */
    public long getCacheSize() {
        try {
            String pattern = CACHE_KEY_PREFIX + "*";
            var keys = redisTemplate.keys(pattern);
            return keys != null ? keys.size() : 0;
            
        } catch (Exception e) {
            LOGGER.debug("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è getCacheSize: {}", e.getMessage());
            return -1;
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à —Å—Ç–∏–∫–µ—Ä–æ–≤
     */
    public void clearAll() {
        try {
            var keys = redisTemplate.keys(CACHE_KEY_PREFIX + "*");
            if (keys != null && !keys.isEmpty()) {
                redisTemplate.delete(keys);
            }
        } catch (Exception e) {
            LOGGER.debug("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è clearAll: {}", e.getMessage());
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è Redis
     */
    private String buildCacheKey(String fileId) {
        return CACHE_KEY_PREFIX + fileId;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
     * 
     * @deprecated –£–¥–∞–ª–µ–Ω–æ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞. Redis –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ try-catch
     */
    @Deprecated
    public boolean isRedisAvailable() {
        // Legacy –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        return true;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –õ–ï–ì–ö–û–í–ï–°–ù–£–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ (—Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏, –±–µ–∑ –æ–±—Ö–æ–¥–∞ Redis)
     * 
     * ‚ö†Ô∏è –°–£–ü–ï–† –ë–´–°–¢–†–û: –ù–µ –¥–µ–ª–∞–µ—Ç SCAN/KEYS, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏
     */
    public java.util.Map<String, Object> getDetailedStats() {
        java.util.Map<String, Object> stats = new java.util.HashMap<>();
        
        try {
            stats.put("available", true);
            stats.put("note", "–õ–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ –æ–±—Ö–æ–¥–∞ –∫–ª—é—á–µ–π Redis. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
            
        } catch (Exception e) {
            stats.put("available", false);
            stats.put("error", e.getMessage());
        }
        
        return stats;
    }
    
}
