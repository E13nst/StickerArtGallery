package com.example.sticker_art_gallery.service.file;

import com.example.sticker_art_gallery.dto.StickerCacheDto;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram Bot API
 */
@Service
public class TelegramFileService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(TelegramFileService.class);
    private static final String TELEGRAM_API_URL = "https://api.telegram.org/bot";
    private static final String TELEGRAM_FILE_URL = "https://api.telegram.org/file/bot";
    private static final long MAX_FILE_SIZE = 512 * 1024; // 512 KB
    
    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;
    private final MimeTypeDetectionService mimeTypeService;
    
    @Autowired
    public TelegramFileService(ObjectMapper objectMapper, MimeTypeDetectionService mimeTypeService) {
        this.restTemplate = new RestTemplate();
        this.objectMapper = objectMapper;
        this.mimeTypeService = mimeTypeService;
    }
    
    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –∏ —Å–æ–∑–¥–∞–µ—Ç StickerCacheDto
     * 
     * @param fileId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ –≤ Telegram
     * @param botToken —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram API
     * @return StickerCacheDto —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞
     * @throws RuntimeException –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å
     */
    public StickerCacheDto downloadFile(String fileId, String botToken) {
        try {
            LOGGER.debug("üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ '{}'", fileId);
            
            // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ getFile
            TelegramFileInfo fileInfo = getFileInfo(fileId, botToken);
            
            // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if (fileInfo.fileSize() > MAX_FILE_SIZE) {
                throw new IllegalArgumentException(
                    String.format("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: %d –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º: %d)", 
                    fileInfo.fileSize(), MAX_FILE_SIZE));
            }
            
            // 3. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            byte[] fileData = downloadFileData(fileInfo.filePath(), botToken);
            
            // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            String mimeType = determineMimeType(fileId, fileInfo.filePath());
            
            // 5. –í–∞–ª–∏–¥–∞—Ü–∏—è MIME —Ç–∏–ø–∞ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
            if (!mimeTypeService.isValidStickerMimeType(mimeType)) {
                LOGGER.warn("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME —Ç–∏–ø –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞: {}", mimeType);
            }
            
            // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            String fileName = mimeTypeService.generateFileName(fileId, mimeType);
            
            // 7. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            StickerCacheDto result = StickerCacheDto.create(
                fileId, fileData, mimeType, fileName, fileInfo.filePath());
            
            LOGGER.info("‚úÖ –§–∞–π–ª '{}' —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {} –±–∞–π—Ç, MIME: {}", 
                    fileId, fileData.length, mimeType);
            
            return result;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{}': {}", fileId, e.getMessage(), e);
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram: " + fileId, e);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ Telegram Bot API
     */
    private TelegramFileInfo getFileInfo(String fileId, String token) throws Exception {
        String url = TELEGRAM_API_URL + token + "/getFile?file_id=" + fileId;
        
        LOGGER.debug("üåê –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {}", url.replace(token, "***"));
        
        ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
        
        if (!response.getStatusCode().is2xxSuccessful() || response.getBody() == null) {
            throw new RuntimeException("–ù–µ—É—Å–ø–µ—à–Ω—ã–π HTTP –æ—Ç–≤–µ—Ç: " + response.getStatusCode());
        }
        
        JsonNode responseJson = objectMapper.readTree(response.getBody());
        
        if (!responseJson.has("ok") || !responseJson.get("ok").asBoolean()) {
            String errorDescription = responseJson.has("description") 
                ? responseJson.get("description").asText() 
                : "Unknown error";
            throw new RuntimeException("Telegram API error: " + errorDescription);
        }
        
        JsonNode result = responseJson.get("result");
        String filePath = result.get("file_path").asText();
        long fileSize = result.has("file_size") ? result.get("file_size").asLong() : 0;
        
        LOGGER.debug("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –ø–æ–ª—É—á–µ–Ω–∞: path={}, size={}", filePath, fileSize);
        
        return new TelegramFileInfo(fileId, filePath, fileSize);
    }
    
    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –ø–æ file_path
     */
    private byte[] downloadFileData(String filePath, String token) {
        String fileUrl = TELEGRAM_FILE_URL + token + "/" + filePath;
        
        LOGGER.debug("üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª: {}", fileUrl.replace(token, "***"));
        
        ResponseEntity<byte[]> response = restTemplate.getForEntity(fileUrl, byte[].class);
        
        if (!response.getStatusCode().is2xxSuccessful() || response.getBody() == null) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: " + response.getStatusCode());
        }
        
        byte[] fileData = response.getBody();
        if (fileData == null) {
            throw new RuntimeException("–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞");
        }
        LOGGER.debug("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {} –±–∞–π—Ç", fileData.length);
        
        return fileData;
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
     */
    private String determineMimeType(String fileId, String filePath) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
        String mimeByExtension = mimeTypeService.detectMimeTypeByExtension(filePath);
        if (!"application/octet-stream".equals(mimeByExtension)) {
            return mimeByExtension;
        }
        
        // Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ file_id
        return mimeTypeService.detectMimeType(fileId);
    }
    
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç file_id
     */
    public boolean isValidFileId(String fileId) {
        if (fileId == null || fileId.trim().isEmpty()) {
            return false;
        }
        
        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: file_id –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        return fileId.matches("^[A-Za-z0-9_-]+$") && fileId.length() >= 10 && fileId.length() <= 100;
    }
    
    /**
     * Record –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –∏–∑ Telegram
     */
    private record TelegramFileInfo(String fileId, String filePath, long fileSize) {}
}
