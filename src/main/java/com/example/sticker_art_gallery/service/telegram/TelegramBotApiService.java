package com.example.sticker_art_gallery.service.telegram;

import com.example.sticker_art_gallery.config.AppConfig;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.RestClientException;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
 */
@Service
public class TelegramBotApiService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(TelegramBotApiService.class);
    private static final String TELEGRAM_API_URL = "https://api.telegram.org/bot";
    
    private final RestTemplate restTemplate;
    private final AppConfig appConfig;
    private final ObjectMapper objectMapper;
    
    @Autowired
    public TelegramBotApiService(AppConfig appConfig, ObjectMapper objectMapper) {
        this.restTemplate = new RestTemplate();
        this.appConfig = appConfig;
        this.objectMapper = objectMapper;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ —á–µ—Ä–µ–∑ Telegram Bot API
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 15 –º–∏–Ω—É—Ç
     * 
     * @param stickerSetName –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     * @return JSON —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ –∏–ª–∏ null –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
     */
    @Cacheable(value = "stickerSetInfo", key = "#stickerSetName", unless = "#result == null")
    public String getStickerSetInfo(String stickerSetName) {
        try {
            LOGGER.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ '{}'", stickerSetName);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            String botToken = appConfig.getTelegram().getBotToken();
            if (botToken == null || botToken.trim().isEmpty()) {
                LOGGER.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                throw new IllegalArgumentException("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            String url = TELEGRAM_API_URL + botToken + "/getStickerSet?name=" + stickerSetName;
            
            LOGGER.debug("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API: {}", url.replace(botToken, "***"));
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
            
            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                JsonNode responseJson = objectMapper.readTree(response.getBody());
                
                if (responseJson.has("ok") && responseJson.get("ok").asBoolean()) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ result (–±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ ok, result)
                    JsonNode resultNode = responseJson.get("result");
                    String result = objectMapper.writeValueAsString(resultNode);
                    
                    LOGGER.debug("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ '{}' —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞", stickerSetName);
                    return result;
                } else {
                    String errorDescription = responseJson.has("description") 
                        ? responseJson.get("description").asText() 
                        : "Unknown error";
                    LOGGER.warn("‚ùå –û—à–∏–±–∫–∞ –æ—Ç Telegram Bot API –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ '{}': {}", stickerSetName, errorDescription);
                    throw new RuntimeException("Telegram API error: " + errorDescription);
                }
            } else {
                LOGGER.warn("‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–π HTTP –æ—Ç–≤–µ—Ç: {}", response.getStatusCode());
                throw new RuntimeException("HTTP error: " + response.getStatusCode());
            }
            
        } catch (RestClientException e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram Bot API –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ '{}': {}", stickerSetName, e.getMessage());
            throw new RuntimeException("Network error while fetching sticker set info", e);
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ '{}': {}", stickerSetName, e.getMessage(), e);
            throw new RuntimeException("Unexpected error while fetching sticker set info", e);
        }
    }
}
