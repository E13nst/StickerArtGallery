package com.example.sticker_art_gallery.service.telegram;

import com.example.sticker_art_gallery.config.AppConfig;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.RestClientException;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
 */
@Service
public class TelegramBotApiService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(TelegramBotApiService.class);
    private static final String TELEGRAM_API_URL = "https://api.telegram.org/bot";
    
    private final RestTemplate restTemplate;
    private final AppConfig appConfig;
    private final ObjectMapper objectMapper;
    
    @Autowired
    public TelegramBotApiService(AppConfig appConfig, ObjectMapper objectMapper) {
        this.restTemplate = new RestTemplate();
        this.appConfig = appConfig;
        this.objectMapper = objectMapper;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ —á–µ—Ä–µ–∑ Telegram Bot API
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –≤ Caffeine –Ω–∞ 15 –º–∏–Ω—É—Ç
     * 
     * @param stickerSetName –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     * @return JSON –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ –∏–ª–∏ null –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
     */
    @Cacheable(value = "stickerSetInfo", key = "#stickerSetName", unless = "#result == null")
    public Object getStickerSetInfo(String stickerSetName) {
        try {
            LOGGER.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ '{}' (–∑–∞–ø—Ä–æ—Å –∫ Telegram API)", stickerSetName);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            String botToken = appConfig.getTelegram().getBotToken();
            if (botToken == null || botToken.trim().isEmpty()) {
                LOGGER.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                throw new IllegalArgumentException("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            String url = TELEGRAM_API_URL + botToken + "/getStickerSet?name=" + stickerSetName;
            
            LOGGER.debug("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API: {}", url.replace(botToken, "***"));
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
            
            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                JsonNode responseJson = objectMapper.readTree(response.getBody());
                
                if (responseJson.has("ok") && responseJson.get("ok").asBoolean()) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ result (–±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ ok, result)
                    JsonNode resultNode = responseJson.get("result");
                    Object result = objectMapper.treeToValue(resultNode, Object.class);
                    
                    LOGGER.debug("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ '{}' —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞", stickerSetName);
                    return result;
                } else {
                    String errorDescription = responseJson.has("description") 
                        ? responseJson.get("description").asText() 
                        : "Unknown error";
                    LOGGER.warn("‚ùå –û—à–∏–±–∫–∞ –æ—Ç Telegram Bot API –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ '{}': {}", stickerSetName, errorDescription);
                    throw new RuntimeException("Telegram API error: " + errorDescription);
                }
            } else {
                LOGGER.warn("‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–π HTTP –æ—Ç–≤–µ—Ç: {}", response.getStatusCode());
                throw new RuntimeException("HTTP error: " + response.getStatusCode());
            }
            
        } catch (RestClientException e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram Bot API –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ '{}': {}", stickerSetName, e.getMessage());
            throw new RuntimeException("Network error while fetching sticker set info", e);
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ '{}': {}", stickerSetName, e.getMessage(), e);
            throw new RuntimeException("Unexpected error while fetching sticker set info", e);
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     * 
     * @param stickerSetName –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     */
    @CacheEvict(value = "stickerSetInfo", key = "#stickerSetName")
    public void evictStickerSetCache(String stickerSetName) {
        LOGGER.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ '{}'", stickerSetName);
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
     */
    @CacheEvict(value = "stickerSetInfo", allEntries = true)
    public void evictAllStickerSetCache() {
        LOGGER.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤");
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram Bot API
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –≤ Caffeine –Ω–∞ 15 –º–∏–Ω—É—Ç
     * 
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
     * @return JSON –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ null –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
     */
    @Cacheable(value = "userInfo", key = "#userId", unless = "#result == null")
    public Object getUserInfo(Long userId) {
        try {
            LOGGER.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ '{}' (–∑–∞–ø—Ä–æ—Å –∫ Telegram API)", userId);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            String botToken = appConfig.getTelegram().getBotToken();
            if (botToken == null || botToken.trim().isEmpty()) {
                LOGGER.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                throw new IllegalArgumentException("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ getChatMember
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º getChatMember —Å chat_id = user_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            String url = TELEGRAM_API_URL + botToken + "/getChatMember?chat_id=" + userId + "&user_id=" + userId;
            
            LOGGER.debug("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API: {}", url.replace(botToken, "***"));
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
            
            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                JsonNode responseJson = objectMapper.readTree(response.getBody());
                
                if (responseJson.has("ok") && responseJson.get("ok").asBoolean()) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ result (–±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ ok, result)
                    JsonNode resultNode = responseJson.get("result");
                    Object result = objectMapper.treeToValue(resultNode, Object.class);
                    
                    LOGGER.debug("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ '{}' —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞", userId);
                    return result;
                } else {
                    String errorDescription = responseJson.has("description") 
                        ? responseJson.get("description").asText() 
                        : "Unknown error";
                    LOGGER.warn("‚ùå –û—à–∏–±–∫–∞ –æ—Ç Telegram Bot API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}': {}", userId, errorDescription);
                    throw new RuntimeException("Telegram API error: " + errorDescription);
                }
            } else {
                LOGGER.warn("‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–π HTTP –æ—Ç–≤–µ—Ç: {}", response.getStatusCode());
                throw new RuntimeException("HTTP error: " + response.getStatusCode());
            }
            
        } catch (RestClientException e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram Bot API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}': {}", userId, e.getMessage());
            throw new RuntimeException("Network error while fetching user info", e);
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ '{}': {}", userId, e.getMessage(), e);
            throw new RuntimeException("Unexpected error while fetching user info", e);
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * 
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
     */
    @CacheEvict(value = "userInfo", key = "#userId")
    public void evictUserCache(Long userId) {
        LOGGER.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}'", userId);
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @CacheEvict(value = "userInfo", allEntries = true)
    public void evictAllUserCache() {
        LOGGER.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram Bot API
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –≤ Caffeine –Ω–∞ 15 –º–∏–Ω—É—Ç
     * 
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
     * @return JSON –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ null –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
     */
    @Cacheable(value = "userProfilePhotos", key = "#userId", unless = "#result == null")
    public Object getUserProfilePhotos(Long userId) {
        try {
            LOGGER.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}' (–∑–∞–ø—Ä–æ—Å –∫ Telegram API)", userId);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            String botToken = appConfig.getTelegram().getBotToken();
            if (botToken == null || botToken.trim().isEmpty()) {
                LOGGER.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                throw new IllegalArgumentException("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ getUserProfilePhotos
            String url = TELEGRAM_API_URL + botToken + "/getUserProfilePhotos?user_id=" + userId + "&limit=1";
            
            LOGGER.debug("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API: {}", url.replace(botToken, "***"));
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
            
            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                JsonNode responseJson = objectMapper.readTree(response.getBody());
                
                if (responseJson.has("ok") && responseJson.get("ok").asBoolean()) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ result (–±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ ok, result)
                    JsonNode resultNode = responseJson.get("result");
                    Object result = objectMapper.treeToValue(resultNode, Object.class);
                    
                    LOGGER.debug("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}' —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã", userId);
                    return result;
                } else {
                    String errorDescription = responseJson.has("description") 
                        ? responseJson.get("description").asText() 
                        : "Unknown error";
                    LOGGER.warn("‚ùå –û—à–∏–±–∫–∞ –æ—Ç Telegram Bot API –¥–ª—è —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}': {}", userId, errorDescription);
                    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
                    return null;
                }
            } else {
                LOGGER.warn("‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–π HTTP –æ—Ç–≤–µ—Ç: {}", response.getStatusCode());
                return null;
            }
            
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}': {} - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null", 
                    userId, e.getMessage());
            return null;
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * 
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
     */
    @CacheEvict(value = "userProfilePhotos", key = "#userId")
    public void evictUserProfilePhotosCache(Long userId) {
        LOGGER.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}'", userId);
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª–µ–π
     */
    @CacheEvict(value = "userProfilePhotos", allEntries = true)
    public void evictAllUserProfilePhotosCache() {
        LOGGER.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª–µ–π");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –≤ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     * 
     * @param stickerSetName –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     * @return –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ –∏–ª–∏ null –µ—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     * @throws RuntimeException –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API
     */
    public Object validateStickerSetExists(String stickerSetName) {
        try {
            LOGGER.debug("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ '{}' –≤ Telegram", stickerSetName);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ getStickerSetInfo, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∫—ç—à–∏—Ä—É–µ—Ç—Å—è
            Object stickerSetInfo = getStickerSetInfo(stickerSetName);
            
            if (stickerSetInfo != null) {
                LOGGER.debug("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç '{}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Telegram", stickerSetName);
                return stickerSetInfo;
            } else {
                LOGGER.warn("‚ùå –°—Ç–∏–∫–µ—Ä—Å–µ—Ç '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram", stickerSetName);
                return null;
            }
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ '{}': {}", stickerSetName, e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞: " + e.getMessage(), e);
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç title –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç Telegram API
     * 
     * @param stickerSetInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ –æ—Ç Telegram API
     * @return title —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    public String extractTitleFromStickerSetInfo(Object stickerSetInfo) {
        if (stickerSetInfo == null) {
            return null;
        }
        
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JsonNode –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º
            JsonNode jsonNode = objectMapper.valueToTree(stickerSetInfo);
            
            if (jsonNode.has("title")) {
                String title = jsonNode.get("title").asText();
                LOGGER.debug("üìù –ò–∑–≤–ª–µ—á–µ–Ω title –∏–∑ Telegram API: '{}'", title);
                return title;
            } else {
                LOGGER.warn("‚ö†Ô∏è –ü–æ–ª–µ 'title' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ");
                return null;
            }
            
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ title –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ: {}", e.getMessage());
            return null;
        }
    }
}
