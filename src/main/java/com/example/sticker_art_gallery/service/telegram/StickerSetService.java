package com.example.sticker_art_gallery.service.telegram;

import com.example.sticker_art_gallery.dto.PageRequest;
import com.example.sticker_art_gallery.dto.PageResponse;
import com.example.sticker_art_gallery.dto.StickerSetDto;
import com.example.sticker_art_gallery.dto.CreateStickerSetDto;
import com.example.sticker_art_gallery.model.category.Category;
import com.example.sticker_art_gallery.model.telegram.StickerSet;
import com.example.sticker_art_gallery.model.telegram.StickerSetRepository;
import com.example.sticker_art_gallery.service.category.CategoryService;
import com.example.sticker_art_gallery.service.user.UserService;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;
import jakarta.transaction.Transactional;

@Service
public class StickerSetService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerSetService.class);
    private final StickerSetRepository stickerSetRepository;
    private final UserService userService;
    private final TelegramBotApiService telegramBotApiService;
    private final CategoryService categoryService;
    
    @Autowired
    public StickerSetService(StickerSetRepository stickerSetRepository, UserService userService, 
                           TelegramBotApiService telegramBotApiService, CategoryService categoryService) {
        this.stickerSetRepository = stickerSetRepository;
        this.userService = userService;
        this.telegramBotApiService = telegramBotApiService;
        this.categoryService = categoryService;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
     * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     * - –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –≤ Telegram API
     * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç title –∏–∑ Telegram API –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
     * - –ò–∑–≤–ª–µ–∫–∞–µ—Ç userId –∏–∑ initData –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
     */
    public StickerSet createStickerSet(CreateStickerSetDto createDto) {
        LOGGER.info("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: {}", createDto.getName());
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
        createDto.normalizeName();
        String stickerSetName = createDto.getName();
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
        StickerSet existingStickerSet = findByName(stickerSetName);
        if (existingStickerSet != null) {
            throw new IllegalArgumentException("–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å –∏–º–µ–Ω–µ–º '" + stickerSetName + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥–∞–ª–µ—Ä–µ–µ");
        }
        
        // 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –≤ Telegram API
        Object telegramStickerSetInfo;
        try {
            telegramStickerSetInfo = telegramBotApiService.validateStickerSetExists(stickerSetName);
            if (telegramStickerSetInfo == null) {
                throw new IllegalArgumentException("–°—Ç–∏–∫–µ—Ä—Å–µ—Ç '" + stickerSetName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram");
            }
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –≤ Telegram API: {}", e.getMessage());
            throw new IllegalArgumentException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –≤ Telegram: " + e.getMessage());
        }
        
        // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º userId
        Long userId = createDto.getUserId();
        if (userId == null) {
            userId = extractUserIdFromAuthentication();
            if (userId == null) {
                throw new IllegalArgumentException("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ userId –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ Telegram Web App");
            }
            LOGGER.debug("üì± –ò–∑–≤–ª–µ—á–µ–Ω userId –∏–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {}", userId);
        }
        
        // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º title
        String title = createDto.getTitle();
        if (title == null || title.trim().isEmpty()) {
            title = telegramBotApiService.extractTitleFromStickerSetInfo(telegramStickerSetInfo);
            if (title == null || title.trim().isEmpty()) {
                throw new IllegalArgumentException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –∏–∑ Telegram API");
            }
            LOGGER.debug("üìù –ü–æ–ª—É—á–µ–Ω title –∏–∑ Telegram API: '{}'", title);
        }
        
        // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        List<Category> categories = null;
        if (createDto.getCategoryKeys() != null && !createDto.getCategoryKeys().isEmpty()) {
            try {
                categories = categoryService.getCategoriesByKeys(createDto.getCategoryKeys());
                LOGGER.debug("üìÅ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}", categories.size());
            } catch (IllegalArgumentException e) {
                LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}", e.getMessage());
                throw e;
            }
        }
        
        // 6. –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
        return createStickerSetInternal(userId, title, stickerSetName, categories);
    }
    
    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    private StickerSet createStickerSetInternal(Long userId, String title, String name, List<Category> categories) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try {
            userService.findOrCreateByTelegramId(userId, null, null, null, null);
            LOGGER.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞", userId);
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
        }
        
        StickerSet stickerSet = new StickerSet();
        stickerSet.setUserId(userId);
        stickerSet.setTitle(title);
        stickerSet.setName(name);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        if (categories != null && !categories.isEmpty()) {
            for (Category category : categories) {
                stickerSet.addCategory(category);
            }
            LOGGER.debug("üìÅ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—É: {}", categories.size());
        }

        StickerSet savedSet = stickerSetRepository.save(stickerSet);
        LOGGER.info("üì¶ –°–æ–∑–¥–∞–Ω —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: ID={}, Title='{}', Name='{}', UserId={}, Categories={}", 
                savedSet.getId(), title, name, userId, 
                savedSet.getCategories() != null ? savedSet.getCategories().size() : 0);

        return savedSet;
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç userId –∏–∑ —Ç–µ–∫—É—â–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    private Long extractUserIdFromAuthentication() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication != null && authentication.getPrincipal() instanceof com.example.sticker_art_gallery.model.user.UserEntity) {
                com.example.sticker_art_gallery.model.user.UserEntity user = 
                    (com.example.sticker_art_gallery.model.user.UserEntity) authentication.getPrincipal();
                return user.getId();
            }
            return null;
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ userId –∏–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {}", e.getMessage());
            return null;
        }
    }

    public StickerSet findByName(String name) {
        return stickerSetRepository.findByName(name).orElse(null);
    }

    public StickerSet findByTitle(String title) {
        return stickerSetRepository.findByTitle(title);
    }

    public List<StickerSet> findByUserId(Long userId) {
        return stickerSetRepository.findByUserId(userId);
    }

    public StickerSet findById(Long id) {
        return stickerSetRepository.findById(id).orElse(null);
    }
    
    public List<StickerSet> findAll() {
        return stickerSetRepository.findAll();
    }
    
    public StickerSet save(StickerSet stickerSet) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try {
            userService.findOrCreateByTelegramId(stickerSet.getUserId(), null, null, null, null);
            LOGGER.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞", stickerSet.getUserId());
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", stickerSet.getUserId(), e.getMessage());
        }
        
        return stickerSetRepository.save(stickerSet);
    }
    
    public void deleteById(Long id) {
        stickerSetRepository.deleteById(id);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö Bot API
     */
    public PageResponse<StickerSetDto> findAllWithPagination(PageRequest pageRequest, String language) {
        LOGGER.debug("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}, language={}", 
                pageRequest.getPage(), pageRequest.getSize(), language);
        
        Page<StickerSet> stickerSetsPage = stickerSetRepository.findAll(pageRequest.toPageable());
        List<StickerSetDto> enrichedDtos = enrichWithBotApiDataAndCategories(stickerSetsPage.getContent(), language);
        
        return PageResponse.of(stickerSetsPage, enrichedDtos);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö Bot API
     */
    public PageResponse<StickerSetDto> findByUserIdWithPagination(Long userId, PageRequest pageRequest) {
        LOGGER.debug("üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}", 
                userId, pageRequest.getPage(), pageRequest.getSize());
        
        Page<StickerSet> stickerSetsPage = stickerSetRepository.findByUserId(userId, pageRequest.toPageable());
        List<StickerSetDto> enrichedDtos = enrichWithBotApiData(stickerSetsPage.getContent());
        
        return PageResponse.of(stickerSetsPage, enrichedDtos);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –ø–æ –∫–ª—é—á–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö Bot API
     */
    public PageResponse<StickerSetDto> findByCategoryKeys(String[] categoryKeys, PageRequest pageRequest, String language) {
        LOGGER.debug("üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {} —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}", 
                String.join(",", categoryKeys), pageRequest.getPage(), pageRequest.getSize());
        
        Page<StickerSet> stickerSetsPage = stickerSetRepository.findByCategoryKeys(categoryKeys, pageRequest.toPageable());
        List<StickerSetDto> enrichedDtos = enrichWithBotApiDataAndCategories(stickerSetsPage.getContent(), language);
        
        return PageResponse.of(stickerSetsPage, enrichedDtos);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ ID —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö Bot API
     * –ï—Å–ª–∏ Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –±–µ–∑ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
     */
    public StickerSetDto findByIdWithBotApiData(Long id) {
        LOGGER.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ ID {} —Å –¥–∞–Ω–Ω—ã–º–∏ Bot API", id);
        
        StickerSet stickerSet = stickerSetRepository.findById(id).orElse(null);
        if (stickerSet == null) {
            return null;
        }
        
        return enrichSingleStickerSetSafely(stickerSet);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ –∏–º–µ–Ω–∏ —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö Bot API
     * –ï—Å–ª–∏ Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –±–µ–∑ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
     */
    public StickerSetDto findByNameWithBotApiData(String name) {
        LOGGER.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ '{}' —Å –¥–∞–Ω–Ω—ã–º–∏ Bot API", name);
        
        StickerSet stickerSet = stickerSetRepository.findByName(name).orElse(null);
        if (stickerSet == null) {
            return null;
        }
        
        return enrichSingleStickerSetSafely(stickerSet);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     */
    @Transactional
    public StickerSet updateCategories(Long stickerSetId, Set<String> categoryKeys) {
        LOGGER.info("üè∑Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ ID: {}, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {}", stickerSetId, categoryKeys);
        
        StickerSet stickerSet = stickerSetRepository.findById(stickerSetId)
            .orElseThrow(() -> new IllegalArgumentException("–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID " + stickerSetId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        stickerSet.clearCategories();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        if (categoryKeys != null && !categoryKeys.isEmpty()) {
            try {
                List<Category> categories = categoryService.getCategoriesByKeys(categoryKeys);
                for (Category category : categories) {
                    stickerSet.addCategory(category);
                }
                LOGGER.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—É {}", categories.size(), stickerSetId);
            } catch (IllegalArgumentException e) {
                LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {}", e.getMessage());
                throw e;
            }
        }
        
        StickerSet savedStickerSet = stickerSetRepository.save(stickerSet);
        LOGGER.info("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ {} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", stickerSetId);
        
        return savedStickerSet;
    }
    
    /**
     * –û–±–æ–≥–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bot API –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Hibernate)
     */
    private List<StickerSetDto> enrichWithBotApiDataAndCategories(List<StickerSet> stickerSets, String language) {
        if (stickerSets.isEmpty()) {
            return List.of();
        }
        
        LOGGER.debug("üöÄ –û–±–æ–≥–∞—â–µ–Ω–∏–µ {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ Bot API –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)", stickerSets.size());
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å Hibernate Session
        List<StickerSetDto> result = stickerSets.stream()
                .map(stickerSet -> enrichSingleStickerSetSafelyWithCategories(stickerSet, language))
                .collect(Collectors.toList());
        
        LOGGER.debug("‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤", result.size());
        return result;
    }
    
    /**
     * –û–±–æ–≥–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bot API (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
     */
    private List<StickerSetDto> enrichWithBotApiData(List<StickerSet> stickerSets) {
        return enrichWithBotApiDataAndCategories(stickerSets, "en");
    }
    
    /**
     * –û–±–æ–≥–∞—â–∞–µ—Ç –æ–¥–∏–Ω —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bot API –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
     */
    private StickerSetDto enrichSingleStickerSetSafelyWithCategories(StickerSet stickerSet, String language) {
        StickerSetDto dto = StickerSetDto.fromEntity(stickerSet, language);
        
        try {
            Object botApiData = telegramBotApiService.getStickerSetInfo(stickerSet.getName());
            dto.setTelegramStickerSetInfo(botApiData);
            LOGGER.debug("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç '{}' –æ–±–æ–≥–∞—â–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ Bot API", stickerSet.getName());
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Bot API –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ '{}': {} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ", 
                    stickerSet.getName(), e.getMessage());
            // –û—Å—Ç–∞–≤–ª—è–µ–º telegramStickerSetInfo = null, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            dto.setTelegramStickerSetInfo(null);
        }
        
        return dto;
    }
    
    /**
     * –û–±–æ–≥–∞—â–∞–µ—Ç –æ–¥–∏–Ω —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bot API (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
     * –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DTO –±–µ–∑ –æ–±–æ–≥–∞—â–µ–Ω–∏—è, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
     */
    private StickerSetDto enrichSingleStickerSetSafely(StickerSet stickerSet) {
        return enrichSingleStickerSetSafelyWithCategories(stickerSet, "en");
    }
} 