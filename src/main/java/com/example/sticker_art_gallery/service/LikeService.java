package com.example.sticker_art_gallery.service;

import com.example.sticker_art_gallery.dto.LikeDto;
import com.example.sticker_art_gallery.dto.LikeToggleResult;
import com.example.sticker_art_gallery.dto.PageRequest;
import com.example.sticker_art_gallery.dto.PageResponse;
import com.example.sticker_art_gallery.dto.StickerSetDto;
import com.example.sticker_art_gallery.dto.StickerSetWithLikesDto;
import com.example.sticker_art_gallery.model.Like;
import com.example.sticker_art_gallery.model.telegram.StickerSet;
import com.example.sticker_art_gallery.repository.LikeRepository;
import com.example.sticker_art_gallery.model.telegram.StickerSetRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∞–π–∫–∞–º–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
 */
@Service
@Transactional
public class LikeService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(LikeService.class);
    
    private final LikeRepository likeRepository;
    private final StickerSetRepository stickerSetRepository;
    
    public LikeService(LikeRepository likeRepository, StickerSetRepository stickerSetRepository) {
        this.likeRepository = likeRepository;
        this.stickerSetRepository = stickerSetRepository;
    }
    
    /**
     * –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—É
     */
    public LikeDto likeStickerSet(Long userId, Long stickerSetId) {
        LOGGER.info("‚ù§Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ª–∞–π–∫–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç {}", userId, stickerSetId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
        StickerSet stickerSet = stickerSetRepository.findById(stickerSetId)
            .orElseThrow(() -> new IllegalArgumentException("–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID " + stickerSetId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∞–π–∫–Ω—É–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (likeRepository.existsByUserIdAndStickerSetId(userId, stickerSetId)) {
            throw new IllegalArgumentException("–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç");
        }
        
        // –°–æ–∑–¥–∞–µ–º –ª–∞–π–∫
        Like like = new Like();
        like.setUserId(userId);
        like.setStickerSet(stickerSet);
        
        Like savedLike = likeRepository.save(like);
        LOGGER.info("‚úÖ –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω: {}", savedLike.getId());
        
        return LikeDto.fromEntity(savedLike);
    }
    
    /**
     * –£–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     */
    public void unlikeStickerSet(Long userId, Long stickerSetId) {
        LOGGER.info("üíî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–±–∏—Ä–∞–µ—Ç –ª–∞–π–∫ —Å–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ {}", userId, stickerSetId);
        
        Like like = likeRepository.findByUserIdAndStickerSetId(userId, stickerSetId)
            .orElseThrow(() -> new IllegalArgumentException("–õ–∞–π–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        likeRepository.delete(like);
        LOGGER.info("‚úÖ –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–∞–π–∫ (–ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç, —É–±—Ä–∞—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å)
     */
    public LikeToggleResult toggleLike(Long userId, Long stickerSetId) {
        LOGGER.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ª–∞–π–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ {}", userId, stickerSetId);
        
        boolean exists = likeRepository.existsByUserIdAndStickerSetId(userId, stickerSetId);
        
        if (exists) {
            unlikeStickerSet(userId, stickerSetId);
            long totalLikes = getLikesCount(stickerSetId);
            LOGGER.info("‚úÖ –õ–∞–π–∫ —É–±—Ä–∞–Ω, –≤—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {}", totalLikes);
            return new LikeToggleResult(false, totalLikes);
        } else {
            likeStickerSet(userId, stickerSetId);
            long totalLikes = getLikesCount(stickerSetId);
            LOGGER.info("‚úÖ –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {}", totalLikes);
            return new LikeToggleResult(true, totalLikes);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     */
    @Transactional(readOnly = true)
    public long getLikesCount(Long stickerSetId) {
        return likeRepository.countByStickerSetId(stickerSetId);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
     */
    @Transactional(readOnly = true)
    public boolean isLikedByUser(Long userId, Long stickerSetId) {
        return likeRepository.existsByUserIdAndStickerSetId(userId, stickerSetId);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–Ω—É—Ç—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional(readOnly = true)
    public PageResponse<StickerSetDto> getLikedStickerSets(Long userId, PageRequest pageRequest, String language) {
        LOGGER.debug("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}", 
                userId, pageRequest.getPage(), pageRequest.getSize());
        
        Page<StickerSet> likedStickerSets = likeRepository.findLikedStickerSetsByUserId(userId, pageRequest.toPageable());
        
        List<StickerSetDto> dtos = likedStickerSets.getContent().stream()
            .map(stickerSet -> StickerSetDto.fromEntity(stickerSet, language))
            .collect(Collectors.toList());
        
        return PageResponse.of(likedStickerSets, dtos);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–Ω—É—Ç—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    @Transactional(readOnly = true)
    public PageResponse<StickerSetDto> getLikedStickerSetsByCategories(Long userId, String[] categoryKeys, 
                                                                        PageRequest pageRequest, String language) {
        LOGGER.debug("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {} —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}", 
                userId, categoryKeys, pageRequest.getPage(), pageRequest.getSize());
        
        List<String> categoryKeyList = java.util.Arrays.asList(categoryKeys);
        Page<StickerSet> likedStickerSets = likeRepository.findLikedStickerSetsByUserIdAndCategoryKeys(
                userId, categoryKeyList, pageRequest.toPageable());
        
        List<StickerSetDto> dtos = likedStickerSets.getContent().stream()
            .map(stickerSet -> StickerSetDto.fromEntity(stickerSet, language))
            .collect(Collectors.toList());
        
        return PageResponse.of(likedStickerSets, dtos);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º
     */
    @Transactional(readOnly = true)
    public PageResponse<StickerSetWithLikesDto> getTopStickerSetsByLikes(PageRequest pageRequest, String language, Long currentUserId) {
        LOGGER.debug("üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}", 
                pageRequest.getPage(), pageRequest.getSize());
        
        Page<Object[]> results = likeRepository.findTopStickerSetsByLikes(pageRequest.toPageable());
        
        List<StickerSetWithLikesDto> dtos = results.getContent().stream()
            .map(result -> {
                StickerSet stickerSet = (StickerSet) result[0];
                Long likesCount = (Long) result[1];
                
                StickerSetWithLikesDto dto = new StickerSetWithLikesDto();
                dto.setStickerSet(StickerSetDto.fromEntity(stickerSet, language));
                dto.setLikesCount(likesCount);
                
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–Ω—É–ª –ª–∏ –æ–Ω —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
                if (currentUserId != null) {
                    dto.setLikedByCurrentUser(isLikedByUser(currentUserId, stickerSet.getId()));
                } else {
                    dto.setLikedByCurrentUser(false);
                }
                
                return dto;
            })
            .collect(Collectors.toList());
        
        return PageResponse.of(results, dtos);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    @Transactional(readOnly = true)
    public List<Long> getLikedStickerSetIds(Long userId, List<Long> stickerSetIds) {
        return likeRepository.findLikedStickerSetIdsByUserId(userId, stickerSetIds);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional(readOnly = true)
    public PageResponse<LikeDto> getUserLikes(Long userId, PageRequest pageRequest) {
        LOGGER.debug("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}", 
                userId, pageRequest.getPage(), pageRequest.getSize());
        
        Page<Like> likes = likeRepository.findByUserId(userId, pageRequest.toPageable());
        
        List<LikeDto> dtos = likes.getContent().stream()
            .map(LikeDto::fromEntity)
            .collect(Collectors.toList());
        
        return PageResponse.of(likes, dtos);
    }
}
