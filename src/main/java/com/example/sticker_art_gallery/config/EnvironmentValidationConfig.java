package com.example.sticker_art_gallery.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
@Component
public class EnvironmentValidationConfig implements ApplicationRunner {

    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentValidationConfig.class);

    private final Environment environment;

    @Autowired
    public EnvironmentValidationConfig(Environment environment) {
        this.environment = environment;
    }

    @Override
    public void run(ApplicationArguments args) throws Exception {
        LOGGER.info("üîç ===== –ù–ê–ß–ò–ù–ê–ï–ú –í–ê–õ–ò–î–ê–¶–ò–Æ –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø =====");
        
        List<String> missingVariables = new ArrayList<>();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        validateRequiredVariable("TELEGRAM_BOT_TOKEN", missingVariables);
        validateRequiredVariable("DB_HOST", missingVariables);
        validateRequiredVariable("DB_NAME", missingVariables);
        validateRequiredVariable("DB_USERNAME", missingVariables);
        validateRequiredVariable("DB_PASSWORD", missingVariables);
        validateRequiredVariable("APP_URL", missingVariables);
        validateRequiredVariable("STICKER_PROCESSOR_URL", missingVariables);
        
        if (!missingVariables.isEmpty()) {
            LOGGER.error("‚ùå ===== –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====");
            for (String variable : missingVariables) {
                LOGGER.error("   - {}", variable);
            }
            
            LOGGER.error("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –±–µ–∑ —ç—Ç–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö!");
            LOGGER.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.app –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ");
            
            throw new IllegalStateException("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + String.join(", ", missingVariables));
        }
        
        LOGGER.info("‚úÖ ===== –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ï–ù–´ –ö–û–†–†–ï–ö–¢–ù–û =====");
        LOGGER.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ");
    }

    private void validateRequiredVariable(String variableName, List<String> missingVariables) {
        String value = environment.getProperty(variableName);
        if (value == null || value.trim().isEmpty()) {
            missingVariables.add(variableName);
            LOGGER.warn("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{}' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞", variableName);
        } else {
            LOGGER.debug("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", variableName);
        }
    }

}
