package com.example.sticker_art_gallery.security;

import com.example.sticker_art_gallery.dto.TelegramInitData;
import com.example.sticker_art_gallery.model.profile.UserProfileEntity;
import com.example.sticker_art_gallery.service.profile.UserProfileService;
import com.example.sticker_art_gallery.service.user.UserService;
import com.example.sticker_art_gallery.util.TelegramInitDataValidator;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.stereotype.Component;

import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Telegram
 */
@Component
public class TelegramAuthenticationProvider implements AuthenticationProvider {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(TelegramAuthenticationProvider.class);
    
    private final TelegramInitDataValidator validator;
    private final UserProfileService userProfileService;
    private final UserService userService;
    private final ObjectMapper objectMapper;
    
    @Autowired
    public TelegramAuthenticationProvider(TelegramInitDataValidator validator, 
                                         UserProfileService userProfileService,
                                         UserService userService,
                                         ObjectMapper objectMapper) {
        this.validator = validator;
        this.userProfileService = userProfileService;
        this.userService = userService;
        this.objectMapper = objectMapper;
    }
    
    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        if (!supports(authentication.getClass())) {
            LOGGER.debug("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {}", authentication.getClass().getSimpleName());
            return null;
        }
        
        TelegramAuthenticationToken token = (TelegramAuthenticationToken) authentication;
        String initData = token.getInitData();
        Long telegramId = token.getTelegramId();
        String botName = token.getBotName();
        
        LOGGER.info("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: {} –¥–ª—è –±–æ—Ç–∞: {}", telegramId, botName);
        LOGGER.debug("üîç –î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–∞: initData length={}, telegramId={}, botName={}", 
                initData != null ? initData.length() : 0, telegramId, botName);
        
        try {
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
            LOGGER.debug("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData –¥–ª—è telegram_id: {} –∏ –±–æ—Ç–∞: {}", telegramId, botName);
            if (!validator.validateInitData(initData, botName)) {
                LOGGER.warn("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è initData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} –∏ –±–æ—Ç–∞: {}", telegramId, botName);
                return null;
            }
            LOGGER.debug("‚úÖ InitData –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è telegram_id: {} –∏ –±–æ—Ç–∞: {}", telegramId, botName);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
            LOGGER.debug("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData");
            TelegramInitData.TelegramUser telegramUser = extractTelegramUser(initData);
            if (telegramUser == null) {
                LOGGER.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData");
                return null;
            }
            LOGGER.debug("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: id={}, username={}, firstName={}, lastName={}", 
                    telegramUser.getId(), telegramUser.getUsername(), telegramUser.getFirstName(), telegramUser.getLastName());
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram
            userService.upsertFromTelegramData(
                telegramUser.getId(),
                telegramUser.getFirstName(),
                telegramUser.getLastName(),
                telegramUser.getUsername(),
                telegramUser.getLanguageCode(),
                telegramUser.getIsPremium()
            );
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–µ–Ω–∏–≤–æ)
            LOGGER.debug("üîç –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            UserProfileEntity profile = userProfileService.getOrCreateDefault(telegramUser.getId());
            LOGGER.debug("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω/—Å–æ–∑–¥–∞–Ω: userId={}, role={}, artBalance={}", 
                    profile.getUserId(), profile.getRole(), profile.getArtBalance());

            // –°–æ–∑–¥–∞–µ–º authorities –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è
            LOGGER.debug("üîç –°–æ–∑–¥–∞–µ–º authorities –¥–ª—è —Ä–æ–ª–∏: {}", profile.getRole());
            var authorities = TelegramAuthenticationToken.createAuthorities(profile.getRole().name());
            LOGGER.debug("‚úÖ –°–æ–∑–¥–∞–Ω—ã authorities: {}", authorities);
            
            // –°–æ–∑–¥–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            TelegramAuthenticationToken authenticatedToken = new TelegramAuthenticationToken(
                    new AuthUserPrincipal(profile.getUserId(), profile.getRole()),
                    initData, telegramId, botName, authorities
            );
            LOGGER.debug("‚úÖ –°–æ–∑–¥–∞–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω");
            
            LOGGER.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {} (—Ä–æ–ª—å: {}) –¥–ª—è –±–æ—Ç–∞: {}", 
                    telegramUser.getUsername(), profile.getRole(), botName);
            
            return authenticatedToken;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –¥–ª—è –±–æ—Ç–∞ {}: {}", telegramId, botName, e.getMessage(), e);
            return null;
        }
    }
    
    @Override
    public boolean supports(Class<?> authentication) {
        return TelegramAuthenticationToken.class.isAssignableFrom(authentication);
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData –∏—Å–ø–æ–ª—å–∑—É—è ObjectMapper
     */
    private TelegramInitData.TelegramUser extractTelegramUser(String initData) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä user –∏–∑ initData
            String userParam = null;
            String[] params = initData.split("&");
            for (String param : params) {
                if (param.startsWith("user=")) {
                    userParam = param.substring(5); // –£–±–∏—Ä–∞–µ–º "user="
                    break;
                }
            }
            
            if (userParam == null) {
                LOGGER.warn("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä 'user' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ initData");
                return null;
            }
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded JSON
            String userJson = URLDecoder.decode(userParam, StandardCharsets.UTF_8);
            LOGGER.debug("üîç –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π user JSON: {}", userJson);
            
            // –ü–∞—Ä—Å–∏–º JSON —Å –ø–æ–º–æ—â—å—é ObjectMapper
            TelegramInitData.TelegramUser telegramUser = objectMapper.readValue(userJson, TelegramInitData.TelegramUser.class);
            
            LOGGER.debug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–≤–ª–µ—á–µ–Ω: id={}, username={}, firstName={}, isPremium={}", 
                    telegramUser.getId(), telegramUser.getUsername(), telegramUser.getFirstName(), telegramUser.getIsPremium());
            
            return telegramUser;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage(), e);
            return null;
        }
    }
}
