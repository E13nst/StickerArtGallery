package com.example.sticker_art_gallery.controller;

import com.example.sticker_art_gallery.dto.StickerSetDto;
import com.example.sticker_art_gallery.dto.CreateStickerSetDto;
import com.example.sticker_art_gallery.dto.PageRequest;
import com.example.sticker_art_gallery.dto.PageResponse;
import com.example.sticker_art_gallery.dto.StickerSetWithLikesDto;
import com.example.sticker_art_gallery.model.telegram.StickerSet;
import com.example.sticker_art_gallery.service.telegram.StickerSetService;
import com.example.sticker_art_gallery.service.LikeService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Pattern;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;

import java.util.stream.Collectors;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;

@RestController
@RequestMapping("/api/stickersets")
@CrossOrigin(origins = "*") // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
@Tag(name = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã", description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
@SecurityRequirement(name = "TelegramInitData")
public class StickerSetController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerSetController.class);
    private final StickerSetService stickerSetService;
    private final LikeService likeService;
    
    @Autowired
    public StickerSetController(StickerSetService stickerSetService, LikeService likeService) {
        this.stickerSetService = stickerSetService;
        this.likeService = likeService;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    @GetMapping
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram Bot API. " +
                     "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π. " +
                     "–ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä categoryKeys. " +
                     "–¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Web App."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            content = @Content(schema = @Schema(implementation = PageResponse.class),
                examples = @ExampleObject(value = """
                    {
                        "content": [
                            {
                                "id": 1,
                                "userId": 123456789,
                                "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                                "name": "my_stickers_by_StickerGalleryBot",
                                "createdAt": "2025-09-15T10:30:00",
                                "likesCount": 42,
                                "isLikedByCurrentUser": true,
                                "telegramStickerSetInfo": "{\\"name\\":\\"my_stickers_by_StickerGalleryBot\\",\\"title\\":\\"–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã\\",\\"sticker_type\\":\\"regular\\",\\"is_animated\\":false,\\"stickers\\":[...]}",
                                "categories": [
                                    {
                                        "id": 1,
                                        "key": "animals",
                                        "name": "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
                                        "description": "–°—Ç–∏–∫–µ—Ä—ã —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏",
                                        "iconUrl": null,
                                        "displayOrder": 1,
                                        "isActive": true
                                    },
                                    {
                                        "id": 2,
                                        "key": "cute",
                                        "name": "–ú–∏–ª—ã–µ",
                                        "description": "–ú–∏–ª—ã–µ —Å—Ç–∏–∫–µ—Ä—ã",
                                        "iconUrl": null,
                                        "displayOrder": 130,
                                        "isActive": true
                                    }
                                ]
                            }
                        ],
                        "page": 0,
                        "size": 20,
                        "totalElements": 156,
                        "totalPages": 8,
                        "first": true,
                        "last": false,
                        "hasNext": true,
                        "hasPrevious": false
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å Telegram Bot API")
    })
    public ResponseEntity<PageResponse<StickerSetDto>> getAllStickerSets(
            @Parameter(description = "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)", example = "0")
            @RequestParam(defaultValue = "0") @Min(0) int page,
            @Parameter(description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-100)", example = "20")
            @RequestParam(defaultValue = "20") @Min(1) @Max(100) int size,
            @Parameter(description = "–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", example = "createdAt")
            @RequestParam(defaultValue = "createdAt") String sort,
            @Parameter(description = "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", example = "DESC")
            @RequestParam(defaultValue = "DESC") @Pattern(regexp = "ASC|DESC") String direction,
            @Parameter(description = "–ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (ru/en)", example = "ru")
            @RequestParam(defaultValue = "en") String language,
            @Parameter(description = "–§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", example = "animals,memes")
            @RequestParam(required = false) String categoryKeys) {
        try {
            LOGGER.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}, sort={}, direction={}, categoryKeys={}", 
                    page, size, sort, direction, categoryKeys);
            
            PageRequest pageRequest = new PageRequest();
            pageRequest.setPage(page);
            pageRequest.setSize(size);
            pageRequest.setSort(sort);
            pageRequest.setDirection(direction);
            
            PageResponse<StickerSetDto> result;
            Long currentUserId = getCurrentUserIdOrNull();
            if (categoryKeys != null && !categoryKeys.trim().isEmpty()) {
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                String[] categoryKeyArray = categoryKeys.split(",");
                result = stickerSetService.findByCategoryKeys(categoryKeyArray, pageRequest, language, currentUserId);
            } else {
                // –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                result = stickerSetService.findAllWithPagination(pageRequest, language, currentUserId);
            }
            
            LOGGER.debug("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {} –∏–∑ {}", 
                    result.getContent().size(), result.getPage() + 1, result.getTotalPages());
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ ID
     */
    @GetMapping("/{id}")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ ID",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–∞–π–¥–µ–Ω",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 1,
                        "userId": 123456789,
                        "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                        "name": "my_stickers_by_StickerGalleryBot",
                        "createdAt": "2025-09-15T10:30:00"
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º)"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<StickerSetDto> getStickerSetById(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", required = true, example = "1")
            @PathVariable @Positive(message = "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long id) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ ID: {} —Å –¥–∞–Ω–Ω—ã–º–∏ Bot API", id);
            StickerSetDto dto = stickerSetService.findByIdWithBotApiData(id);
            
            if (dto == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", id);
                return ResponseEntity.notFound().build();
            }
            
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–∞–π–¥–µ–Ω: {}", dto.getTitle());
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    @GetMapping("/user/{userId}")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram Bot API."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω",
            content = @Content(schema = @Schema(implementation = PageResponse.class),
                examples = @ExampleObject(value = """
                    {
                        "content": [
                            {
                                "id": 1,
                                "userId": 123456789,
                                "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                                "name": "my_stickers_by_StickerGalleryBot",
                                "createdAt": "2025-09-15T10:30:00",
                                "telegramStickerSetInfo": "{\\"name\\":\\"my_stickers_by_StickerGalleryBot\\",\\"title\\":\\"–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã\\",\\"sticker_type\\":\\"regular\\",\\"is_animated\\":false,\\"stickers\\":[...]}"
                            }
                        ],
                        "page": 0,
                        "size": 20,
                        "totalElements": 5,
                        "totalPages": 1,
                        "first": true,
                        "last": true,
                        "hasNext": false,
                        "hasPrevious": false
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å Telegram Bot API")
    })
    public ResponseEntity<PageResponse<StickerSetDto>> getStickerSetsByUserId(
            @Parameter(description = "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required = true, example = "123456789")
            @PathVariable @Positive(message = "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long userId,
            @Parameter(description = "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)", example = "0")
            @RequestParam(defaultValue = "0") @Min(0) int page,
            @Parameter(description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-100)", example = "20")
            @RequestParam(defaultValue = "20") @Min(1) @Max(100) int size,
            @Parameter(description = "–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", example = "createdAt")
            @RequestParam(defaultValue = "createdAt") String sort,
            @Parameter(description = "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", example = "DESC")
            @RequestParam(defaultValue = "DESC") @Pattern(regexp = "ASC|DESC") String direction) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}, sort={}, direction={}", 
                    userId, page, size, sort, direction);
            
            PageRequest pageRequest = new PageRequest();
            pageRequest.setPage(page);
            pageRequest.setSize(size);
            pageRequest.setSort(sort);
            pageRequest.setDirection(direction);
            
            PageResponse<StickerSetDto> result = stickerSetService.findByUserIdWithPagination(userId, pageRequest);
            
            LOGGER.debug("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {} –∏–∑ {}", 
                    result.getContent().size(), userId, result.getPage() + 1, result.getTotalPages());
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    @GetMapping("/search")
    @Operation(
        summary = "–ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
        description = "–ò—â–µ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ (name). –ò–º—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Telegram API."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–∞–π–¥–µ–Ω",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 1,
                        "userId": 123456789,
                        "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                        "name": "my_stickers_by_StickerGalleryBot",
                        "createdAt": "2025-09-15T10:30:00"
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<StickerSetDto> getStickerSetByName(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–ª—è Telegram API", required = true, example = "my_stickers_by_StickerGalleryBot")
            @RequestParam @NotBlank(message = "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º") String name) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {} —Å –¥–∞–Ω–Ω—ã–º–∏ Bot API", name);
            StickerSetDto dto = stickerSetService.findByNameWithBotApiData(name);
            
            if (dto == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", name);
                return ResponseEntity.notFound().build();
            }
            
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–∞–π–¥–µ–Ω: {}", dto.getTitle());
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {}", name, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
     */
    @PostMapping
    @Operation(
        summary = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç",
        description = """
            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.
            
            **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:**
            - `name` - —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–ª—è Telegram API –∏–ª–∏ URL —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
            
            **–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è:**
            - `userId` - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ initData)
            - `title` - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ Telegram API)
            - `categoryKeys` - –º–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["animals", "cute"])
            
            **–ü—Ä–æ—Ü–µ—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**
            1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –≤ Telegram API
            3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
            **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
            - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Web App (initData)
            - –°—Ç–∏–∫–µ—Ä—Å–µ—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Telegram
            - –ò–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ –≥–∞–ª–µ—Ä–µ–µ
            """
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 5,
                        "userId": 123456789,
                        "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                        "name": "my_stickers_by_StickerGalleryBot",
                        "createdAt": "2025-01-15T14:30:00",
                        "telegramStickerSetInfo": "{\\"name\\":\\"my_stickers_by_StickerGalleryBot\\",\\"title\\":\\"–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã\\",\\"sticker_type\\":\\"regular\\",\\"is_animated\\":false,\\"stickers\\":[...]}",
                        "categories": [
                            {
                                "id": 1,
                                "key": "animals",
                                "name": "Animals",
                                "description": "Stickers with animals",
                                "iconUrl": null,
                                "displayOrder": 1,
                                "isActive": true
                            },
                            {
                                "id": 2,
                                "key": "cute",
                                "name": "Cute",
                                "description": "Cute and adorable stickers",
                                "iconUrl": null,
                                "displayOrder": 130,
                                "isActive": true
                            }
                        ]
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            content = @Content(examples = {
                @ExampleObject(name = "–î—É–±–ª–∏–∫–∞—Ç –∏–º–µ–Ω–∏", value = """
                    {
                        "error": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                        "message": "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å –∏–º–µ–Ω–µ–º 'existing_sticker_set' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥–∞–ª–µ—Ä–µ–µ"
                    }
                    """),
                @ExampleObject(name = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è", value = """
                    {
                        "error": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                        "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –∏–ª–∏ URL. –û–∂–∏–¥–∞–µ—Ç—Å—è –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –∏–ª–∏ URL –≤–∏–¥–∞ https://t.me/addstickers/–∏–º—è_—Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞"
                    }
                    """),
                @ExampleObject(name = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç userId", value = """
                    {
                        "error": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                        "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ userId –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ Telegram Web App"
                    }
                    """),
                @ExampleObject(name = "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", value = """
                    {
                        "error": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                        "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–ª—é—á–∞–º–∏ [non_existent_category] –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    }
                    """)
            })),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            content = @Content(examples = @ExampleObject(value = """
                {
                    "error": "Unauthorized",
                    "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Web App"
                }
                """))),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram",
            content = @Content(examples = @ExampleObject(value = """
                {
                    "error": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                    "message": "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç 'nonexistent_sticker_set' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram"
                }
                """))),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            content = @Content(examples = @ExampleObject(value = """
                {
                    "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                    "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞"
                }
                """)))
    })
    public ResponseEntity<?> createStickerSet(
            @Parameter(description = """
                –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞.
                
                **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:**
                - `name` - –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –∏–ª–∏ URL —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ (—Å—Ç—Ä–æ–∫–∞, 1-200 —Å–∏–º–≤–æ–ª–æ–≤)
                
                **–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è:**
                - `userId` - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ initData)
                - `title` - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ Telegram API)
                - `categoryKeys` - –º–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["animals", "cute"])
                
                **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –ø–æ–ª—è name:**
                - –ò–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞: `my_stickers_by_StickerGalleryBot`
                - URL —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞: `https://t.me/addstickers/ShaitanChick`
                
                **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
                - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (–∏–º—è): `{"name": "my_stickers_by_StickerGalleryBot"}`
                - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (URL): `{"name": "https://t.me/addstickers/ShaitanChick"}`
                - –° title: `{"name": "my_stickers", "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã"}`
                - –ü–æ–ª–Ω—ã–π: `{"name": "my_stickers", "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã", "userId": 123456789}`
                """, required = true)
            @Valid @RequestBody CreateStickerSetDto createDto) {
        try {
            LOGGER.info("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞: {}", createDto.getName());
            
            StickerSet newStickerSet = stickerSetService.createStickerSet(createDto);
            StickerSetDto createdDto = StickerSetDto.fromEntity(newStickerSet);
            
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {} (title: '{}', userId: {})", 
                       createdDto.getId(), createdDto.getTitle(), createdDto.getUserId());
            return ResponseEntity.status(HttpStatus.CREATED).body(createdDto);
            
        } catch (IllegalArgumentException e) {
            LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞: {}", e.getMessage());
            return ResponseEntity.badRequest()
                .body(java.util.Map.of(
                    "error", "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                    "message", e.getMessage()
                ));
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(java.util.Map.of(
                    "error", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                    "message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞"
                ));
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
     */
    @PutMapping("/{id}")
    @Operation(
        summary = "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç",
        description = "–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ª—é–±—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã, –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏. –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å title –∏ name. ID –∏ userId –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 1,
                        "userId": 123456789,
                        "title": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã",
                        "name": "updated_stickers_by_StickerGalleryBot",
                        "createdAt": "2025-09-15T10:30:00"
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "403", description = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<StickerSetDto> updateStickerSet(
            @Parameter(description = "ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", required = true, example = "1")
            @PathVariable @Positive(message = "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long id,
            @Parameter(description = "–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", required = true)
            @Valid @RequestBody StickerSetDto stickerSetDto) {
        try {
            LOGGER.info("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id);
            
            StickerSet existingStickerSet = stickerSetService.findById(id);
            if (existingStickerSet == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", id);
                return ResponseEntity.notFound().build();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            org.springframework.security.core.Authentication authentication = 
                org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication();
            
            if (authentication != null && authentication.getPrincipal() instanceof com.example.sticker_art_gallery.model.user.UserEntity) {
                com.example.sticker_art_gallery.model.user.UserEntity currentUser = 
                    (com.example.sticker_art_gallery.model.user.UserEntity) authentication.getPrincipal();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
                boolean isAdmin = currentUser.getRole() == com.example.sticker_art_gallery.model.user.UserEntity.UserRole.ADMIN;
                boolean isOwner = existingStickerSet.getUserId().equals(currentUser.getId());
                
                if (!isAdmin && !isOwner) {
                    LOGGER.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç {}", currentUser.getId(), id);
                    return ResponseEntity.status(org.springframework.http.HttpStatus.FORBIDDEN).build();
                }
                
                LOGGER.debug("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–∞: isAdmin={}, isOwner={}", isAdmin, isOwner);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            if (stickerSetDto.getTitle() != null) {
                existingStickerSet.setTitle(stickerSetDto.getTitle());
            }
            if (stickerSetDto.getName() != null) {
                existingStickerSet.setName(stickerSetDto.getName());
            }
            
            StickerSet updatedStickerSet = stickerSetService.save(existingStickerSet);
            StickerSetDto updatedDto = StickerSetDto.fromEntity(updatedStickerSet);
            
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {}", updatedDto.getTitle());
            return ResponseEntity.ok(updatedDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
     */
    @DeleteMapping("/{id}")
    @Operation(
        summary = "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç",
        description = "–£–¥–∞–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ –µ–≥–æ ID. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã, –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º)"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "403", description = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<Void> deleteStickerSet(
            @Parameter(description = "ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", required = true, example = "1")
            @PathVariable @Positive(message = "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long id) {
        try {
            LOGGER.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id);
            
            StickerSet existingStickerSet = stickerSetService.findById(id);
            if (existingStickerSet == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", id);
                return ResponseEntity.notFound().build();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            org.springframework.security.core.Authentication authentication = 
                org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication();
            
            if (authentication != null && authentication.getPrincipal() instanceof com.example.sticker_art_gallery.model.user.UserEntity) {
                com.example.sticker_art_gallery.model.user.UserEntity currentUser = 
                    (com.example.sticker_art_gallery.model.user.UserEntity) authentication.getPrincipal();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
                boolean isAdmin = currentUser.getRole() == com.example.sticker_art_gallery.model.user.UserEntity.UserRole.ADMIN;
                boolean isOwner = existingStickerSet.getUserId().equals(currentUser.getId());
                
                if (!isAdmin && !isOwner) {
                    LOGGER.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç {}", currentUser.getId(), id);
                    return ResponseEntity.status(org.springframework.http.HttpStatus.FORBIDDEN).build();
                }
                
                LOGGER.debug("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø—Ä–æ–π–¥–µ–Ω–∞: isAdmin={}, isOwner={}", isAdmin, isOwner);
            }
            
            stickerSetService.deleteById(id);
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} —É–¥–∞–ª–µ–Ω", id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     */
    @PutMapping("/{id}/categories")
    @Operation(
        summary = "–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞",
        description = "–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –Ω–æ–≤—ã–µ. " +
                     "–ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. " +
                     "–í—Å–µ –∫–ª—é—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ. " +
                     "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ª—é–±—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã, –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 1,
                        "userId": 123456789,
                        "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                        "name": "my_stickers_by_StickerGalleryBot",
                        "createdAt": "2025-09-15T10:30:00",
                        "categories": [
                            {
                                "id": 1,
                                "key": "animals",
                                "name": "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
                                "description": "–°—Ç–∏–∫–µ—Ä—ã —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏"
                            },
                            {
                                "id": 2,
                                "key": "cute",
                                "name": "–ú–∏–ª—ã–µ",
                                "description": "–ú–∏–ª—ã–µ —Å—Ç–∏–∫–µ—Ä—ã"
                            }
                        ]
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "403", description = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<StickerSetDto> updateStickerSetCategories(
            @Parameter(description = "ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", required = true, example = "1")
            @PathVariable @Positive(message = "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long id,
            @Parameter(description = "–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π", required = true)
            @RequestBody java.util.Set<String> categoryKeys,
            @Parameter(description = "–ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (ru/en)", example = "ru")
            @RequestParam(defaultValue = "en") String language) {
        try {
            LOGGER.info("üè∑Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {}", id, categoryKeys);
            
            StickerSet updatedStickerSet = stickerSetService.updateCategories(id, categoryKeys);
            
            LOGGER.info("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ {} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", id);
            return ResponseEntity.ok(StickerSetDto.fromEntity(updatedStickerSet, language));
            
        } catch (IllegalArgumentException e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ {}: {}", id, e.getMessage());
            return ResponseEntity.badRequest().body(null);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ {}: {}", id, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º
     */
    @GetMapping("/top-bylikes")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é). " +
                     "–í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –ª–∞–π–∫–Ω—É–ª –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∂–¥—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–¢–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            content = @Content(schema = @Schema(implementation = PageResponse.class),
                examples = @ExampleObject(value = """
                    {
                        "content": [
                            {
                                "id": 5,
                                "userId": 123456789,
                                "title": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã",
                                "name": "popular_stickers_by_StickerGalleryBot",
                                "createdAt": "2025-01-15T10:30:00",
                                "likesCount": 42,
                                "isLikedByCurrentUser": true,
                                "categories": []
                            }
                        ],
                        "totalElements": 1,
                        "totalPages": 1,
                        "size": 20,
                        "number": 0,
                        "first": true,
                        "last": true,
                        "numberOfElements": 1
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<PageResponse<StickerSetDto>> getTopStickerSetsByLikes(
            @Parameter(description = "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)", example = "0")
            @RequestParam(defaultValue = "0") @Min(0) int page,
            @Parameter(description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-100)", example = "20")
            @RequestParam(defaultValue = "20") @Min(1) @Max(100) int size,
            @Parameter(description = "–ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (ru/en)", example = "ru")
            @RequestParam(defaultValue = "en") String language) {
        try {
            LOGGER.info("üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}", page, size);
            
            PageRequest pageRequest = new PageRequest();
            pageRequest.setPage(page);
            pageRequest.setSize(size);
            pageRequest.setSort("likesCount");
            pageRequest.setDirection("DESC");
            
            Long currentUserId = getCurrentUserIdOrNull();
            PageResponse<StickerSetWithLikesDto> result = likeService.getTopStickerSetsByLikes(pageRequest, language, currentUserId);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º StickerSetWithLikesDto –≤ StickerSetDto –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é Page –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å PageResponse.of
            Page<StickerSetWithLikesDto> tempPage = new PageImpl<>(
                result.getContent(),
                org.springframework.data.domain.PageRequest.of(result.getPage(), result.getSize()),
                result.getTotalElements()
            );
            
            PageResponse<StickerSetDto> convertedResult = PageResponse.of(
                tempPage,
                result.getContent().stream()
                    .map(StickerSetWithLikesDto::getStickerSet)
                    .collect(Collectors.toList())
            );
            
            LOGGER.debug("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Ç–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {} –∏–∑ {}", 
                    convertedResult.getContent().size(), convertedResult.getPage() + 1, convertedResult.getTotalPages());
            return ResponseEntity.ok(convertedResult);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ SecurityContext (–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å null)
     */
    private Long getCurrentUserIdOrNull() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication == null || !authentication.isAuthenticated() || 
                "anonymousUser".equals(authentication.getPrincipal())) {
                return null;
            }
            return Long.valueOf(authentication.getName());
        } catch (Exception e) {
            return null;
        }
    }
} 