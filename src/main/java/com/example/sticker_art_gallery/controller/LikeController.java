package com.example.sticker_art_gallery.controller;

import com.example.sticker_art_gallery.dto.LikeDto;
import com.example.sticker_art_gallery.dto.LikeToggleResult;
import com.example.sticker_art_gallery.dto.PageRequest;
import com.example.sticker_art_gallery.dto.PageResponse;
import com.example.sticker_art_gallery.dto.StickerSetDto;
import com.example.sticker_art_gallery.dto.StickerSetWithLikesDto;
import com.example.sticker_art_gallery.service.LikeService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.constraints.Positive;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–∞–º–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
 */
@RestController
@RequestMapping("/api/likes")
@Tag(name = "Likes", description = "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–∞–º–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤")
public class LikeController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(LikeController.class);
    
    private final LikeService likeService;
    
    public LikeController(LikeService likeService) {
        this.likeService = likeService;
    }
    
    /**
     * –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—É
     */
    @PostMapping("/sticker-sets/{stickerSetId}")
    @Operation(
        summary = "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—É",
        description = "–î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–π–∫ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—É. " +
                     "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫–Ω—É–ª —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω",
            content = @Content(schema = @Schema(implementation = LikeDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 1,
                        "userId": 123456789,
                        "stickerSetId": 5,
                        "createdAt": "2025-01-15T10:30:00"
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç —É–∂–µ –ª–∞–π–∫–Ω—É—Ç"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<LikeDto> likeStickerSet(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", example = "5")
            @PathVariable @Positive(message = "ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long stickerSetId) {
        try {
            Long userId = getCurrentUserId();
            LOGGER.info("‚ù§Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—É {}", userId, stickerSetId);
            
            LikeDto like = likeService.likeStickerSet(userId, stickerSetId);
            return ResponseEntity.ok(like);
        } catch (IllegalArgumentException e) {
            LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∞–π–∫–∞: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∞–π–∫–∞: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –£–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     */
    @DeleteMapping("/sticker-sets/{stickerSetId}")
    @Operation(
        summary = "–£–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞",
        description = "–£–¥–∞–ª—è–µ—Ç –ª–∞–π–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞. " +
                     "–ï—Å–ª–∏ –ª–∞–π–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω"),
        @ApiResponse(responseCode = "400", description = "–õ–∞–π–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<Void> unlikeStickerSet(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", example = "5")
            @PathVariable @Positive(message = "ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long stickerSetId) {
        try {
            Long userId = getCurrentUserId();
            LOGGER.info("üíî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–±–∏—Ä–∞–µ—Ç –ª–∞–π–∫ —Å–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ {}", userId, stickerSetId);
            
            likeService.unlikeStickerSet(userId, stickerSetId);
            return ResponseEntity.ok().build();
        } catch (IllegalArgumentException e) {
            LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–∞–π–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
     */
    @PutMapping("/sticker-sets/{stickerSetId}/toggle")
    @Operation(
        summary = "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–∞–π–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞",
        description = "–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–π–∫–∞: –µ—Å–ª–∏ –ª–∞–π–∫ –µ—Å—Ç—å - —É–±–∏—Ä–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç - —Å—Ç–∞–≤–∏—Ç. " +
                     "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–π–∫–∞ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω",
            content = @Content(schema = @Schema(implementation = LikeToggleResult.class),
                examples = @ExampleObject(value = """
                    {
                        "isLiked": true,
                        "totalLikes": 42
                    }
                    """))),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<LikeToggleResult> toggleLike(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", example = "5")
            @PathVariable @Positive(message = "ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long stickerSetId) {
        try {
            Long userId = getCurrentUserId();
            LOGGER.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ª–∞–π–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ {}", userId, stickerSetId);
            
            LikeToggleResult result = likeService.toggleLike(userId, stickerSetId);
            return ResponseEntity.ok(result);
        } catch (IllegalArgumentException e) {
            LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ª–∞–π–∫–∞: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ª–∞–π–∫–∞: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–Ω—É—Ç—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/sticker-sets")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–Ω—É—Ç—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, " +
                     "–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ –ª–∞–π–∫–∞ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            content = @Content(schema = @Schema(implementation = PageResponse.class),
                examples = @ExampleObject(value = """
                    {
                        "content": [
                            {
                                "id": 5,
                                "userId": 123456789,
                                "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                                "name": "my_stickers_by_StickerGalleryBot",
                                "createdAt": "2025-01-15T10:30:00",
                                "categories": []
                            }
                        ],
                        "totalElements": 1,
                        "totalPages": 1,
                        "size": 20,
                        "number": 0,
                        "first": true,
                        "last": true,
                        "numberOfElements": 1
                    }
                    """))),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<PageResponse<StickerSetDto>> getLikedStickerSets(
            @Parameter(description = "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)", example = "0")
            @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", example = "20")
            @RequestParam(defaultValue = "20") int size,
            @Parameter(description = "–ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (ru/en)", example = "ru")
            @RequestParam(defaultValue = "en") String language) {
        try {
            Long userId = getCurrentUserId();
            LOGGER.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            
            PageRequest pageRequest = new PageRequest();
            pageRequest.setPage(page);
            pageRequest.setSize(size);
            pageRequest.setSort("createdAt");
            pageRequest.setDirection("DESC");
            PageResponse<StickerSetDto> result = likeService.getLikedStickerSets(userId, pageRequest, language);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º
     */
    @GetMapping("/top-sticker-sets")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é). " +
                     "–í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –ª–∞–π–∫–Ω—É–ª –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∂–¥—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–¢–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            content = @Content(schema = @Schema(implementation = PageResponse.class),
                examples = @ExampleObject(value = """
                    {
                        "content": [
                            {
                                "stickerSet": {
                                    "id": 5,
                                    "userId": 123456789,
                                    "title": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã",
                                    "name": "popular_stickers_by_StickerGalleryBot",
                                    "createdAt": "2025-01-15T10:30:00",
                                    "categories": []
                                },
                                "likesCount": 42,
                                "isLikedByCurrentUser": true
                            }
                        ],
                        "totalElements": 1,
                        "totalPages": 1,
                        "size": 20,
                        "number": 0,
                        "first": true,
                        "last": true,
                        "numberOfElements": 1
                    }
                    """))),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<PageResponse<StickerSetWithLikesDto>> getTopStickerSetsByLikes(
            @Parameter(description = "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)", example = "0")
            @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", example = "20")
            @RequestParam(defaultValue = "20") int size,
            @Parameter(description = "–ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (ru/en)", example = "ru")
            @RequestParam(defaultValue = "en") String language) {
        try {
            LOGGER.info("üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º");
            
            PageRequest pageRequest = new PageRequest();
            pageRequest.setPage(page);
            pageRequest.setSize(size);
            pageRequest.setSort("likesCount");
            pageRequest.setDirection("DESC");
            Long currentUserId = getCurrentUserIdOrNull();
            PageResponse<StickerSetWithLikesDto> result = likeService.getTopStickerSetsByLikes(pageRequest, language, currentUserId);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–∞–π–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–∞–π–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∞–π–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ –ª–∞–π–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            content = @Content(schema = @Schema(implementation = PageResponse.class),
                examples = @ExampleObject(value = """
                    {
                        "content": [
                            {
                                "id": 1,
                                "userId": 123456789,
                                "stickerSetId": 5,
                                "createdAt": "2025-01-15T10:30:00"
                            }
                        ],
                        "totalElements": 1,
                        "totalPages": 1,
                        "size": 20,
                        "number": 0,
                        "first": true,
                        "last": true,
                        "numberOfElements": 1
                    }
                    """))),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<PageResponse<LikeDto>> getUserLikes(
            @Parameter(description = "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)", example = "0")
            @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", example = "20")
            @RequestParam(defaultValue = "20") int size) {
        try {
            Long userId = getCurrentUserId();
            LOGGER.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            
            PageRequest pageRequest = new PageRequest();
            pageRequest.setPage(page);
            pageRequest.setSize(size);
            pageRequest.setSort("createdAt");
            pageRequest.setDirection("DESC");
            PageResponse<LikeDto> result = likeService.getUserLikes(userId, pageRequest);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ SecurityContext
     */
    private Long getCurrentUserId() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated() || 
            "anonymousUser".equals(authentication.getPrincipal())) {
            throw new IllegalStateException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }
        
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ principal —Å–æ–¥–µ—Ä–∂–∏—Ç userId
        return Long.valueOf(authentication.getName());
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ SecurityContext (–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å null)
     */
    private Long getCurrentUserIdOrNull() {
        try {
            return getCurrentUserId();
        } catch (IllegalStateException e) {
            return null;
        }
    }
}
