package com.example.sticker_art_gallery.controller;

import com.example.sticker_art_gallery.dto.UserDto;
import com.example.sticker_art_gallery.model.user.UserEntity;
import com.example.sticker_art_gallery.service.user.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import java.util.Optional;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Telegram
 */
@RestController
@RequestMapping("/api/users")
@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
@Tag(name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", description = "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Telegram")
@SecurityRequirement(name = "TelegramInitData")
public class UserController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(UserController.class);
    
    private final UserService userService;
    
    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –ø–æ ID
     */
    @GetMapping("/{id}")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Bot API –ø–æ –µ–≥–æ ID"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã",
            content = @Content(schema = @Schema(implementation = UserDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 123456789,
                        "username": "testuser",
                        "firstName": "Test",
                        "lastName": "User",
                        "languageCode": "ru",
                        "isPremium": true,
                        "createdAt": "2025-10-20T10:00:00Z",
                        "updatedAt": "2025-10-20T10:00:00Z"
                    }
                    """))),
        @ApiResponse(responseCode = "404", description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<UserDto> getUserById(
            @Parameter(description = "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required = true, example = "123456789")
            @PathVariable Long id) {
        try {
            LOGGER.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: {}", id);
            
            Optional<UserEntity> userOpt = userService.findById(id);
            if (userOpt.isEmpty()) {
                LOGGER.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", id);
                return ResponseEntity.notFound().build();
            }
            
            UserDto userDto = UserDto.fromEntity(userOpt.get());
            
            LOGGER.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã: {}", userDto.getUsername());
            return ResponseEntity.ok(userDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {}: {}", id, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/me")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã"),
        @ApiResponse(responseCode = "404", description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<UserDto> getMyUserData() {
        try {
            Long currentUserId = getCurrentUserId();
            if (currentUserId == null) {
                LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return ResponseEntity.badRequest().build();
            }
            
            LOGGER.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", currentUserId);
            
            Optional<UserEntity> userOpt = userService.findById(currentUserId);
            if (userOpt.isEmpty()) {
                LOGGER.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", currentUserId);
                return ResponseEntity.notFound().build();
            }
            
            UserDto userDto = UserDto.fromEntity(userOpt.get());
            
            LOGGER.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã: {}", userDto.getUsername());
            return ResponseEntity.ok(userDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/{id}/photo")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Bot API —Å file_id –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—É—á–µ–Ω–æ",
            content = @Content(schema = @Schema(implementation = java.util.Map.class),
                examples = @ExampleObject(value = """
                    {
                        "profilePhotos": {
                            "total_count": 4,
                            "photos": [[{...}]]
                        },
                        "profilePhotoFileId": "AgACAgIAAxkBAAIBY2..."
                    }
                    """))),
        @ApiResponse(responseCode = "404", description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<java.util.Map<String, Object>> getUserPhoto(
            @Parameter(description = "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required = true, example = "123456789")
            @PathVariable Long id) {
        try {
            LOGGER.info("üì∑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", id);
            
            java.util.Map<String, Object> photoData = userService.getUserProfilePhoto(id);
            if (photoData == null) {
                LOGGER.warn("‚ö†Ô∏è –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", id);
                return ResponseEntity.notFound().build();
            }
            
            LOGGER.info("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", id);
            return ResponseEntity.ok(photoData);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", id, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ SecurityContext
     */
    private Long getCurrentUserId() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication == null || !authentication.isAuthenticated() || 
                "anonymousUser".equals(authentication.getPrincipal())) {
                return null;
            }
            return Long.valueOf(authentication.getName());
        } catch (Exception e) {
            return null;
        }
    }
}
