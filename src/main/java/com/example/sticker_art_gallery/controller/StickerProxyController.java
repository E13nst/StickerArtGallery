package com.example.sticker_art_gallery.controller;

import com.example.sticker_art_gallery.service.proxy.StickerProxyService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * –ü—Ä–æ–∫—Å–∏-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º —Å—Ç–∏–∫–µ—Ä–æ–≤
 */
@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*", methods = {RequestMethod.GET})
@Tag(name = "–ü—Ä–æ–∫—Å–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤", description = "–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É —Å—Ç–∏–∫–µ—Ä–æ–≤")
public class StickerProxyController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerProxyController.class);
    
    private final StickerProxyService stickerProxyService;
    
    @Autowired
    public StickerProxyController(StickerProxyService stickerProxyService) {
        this.stickerProxyService = stickerProxyService;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ file_id (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ)
     */
    @GetMapping("/stickers/{fileId}")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞",
        description = "–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Redis"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–§–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω"),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π file_id"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "502", description = "–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<Object> getSticker(
            @Parameter(description = "Telegram file_id —Å—Ç–∏–∫–µ—Ä–∞", required = true, 
                      example = "CAACAgIAAxUAAWjHy88gzacLGK1i0RSiNtiW81kJAALgAAP3AsgPYqAgfkyPleo2BA")
            @PathVariable 
            @NotBlank(message = "file_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            @Pattern(regexp = "^[A-Za-z0-9_-]{10,100}$", 
                    message = "file_id –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ - (10-100 —Å–∏–º–≤–æ–ª–æ–≤)")
            String fileId) {
        
        try {
            LOGGER.info("üìÅ –ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ —Å—Ç–∏–∫–µ—Ä–∞: fileId={}", fileId);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è file_id
            if (!isValidFileId(fileId)) {
                LOGGER.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π file_id: {}", fileId);
                return ResponseEntity.badRequest().build();
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–∫–µ—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–∏—Å (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
            ResponseEntity<Object> response = stickerProxyService.getSticker(fileId);
            
            LOGGER.info("‚úÖ –ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: fileId={}, status={}", 
                       fileId, response.getStatusCode());
            
            return response;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∏–∫–µ—Ä–∞ {}: {}", fileId, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ)
     */
    @GetMapping("/stickers/cache/stats")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞",
        description = "–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É —Å—Ç–∏–∫–µ—Ä–æ–≤"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞"),
        @ApiResponse(responseCode = "502", description = "–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<Object> getCacheStats() {
        try {
            LOGGER.info("üìä –ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞");
            
            ResponseEntity<Object> response = stickerProxyService.getCacheStats();
            
            LOGGER.info("‚úÖ –ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: status={}", 
                       response.getStatusCode());
            
            return response;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è file_id
     */
    private boolean isValidFileId(String fileId) {
        if (fileId == null || fileId.trim().isEmpty()) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Å–∏–º–≤–æ–ª—ã
        return fileId.length() >= 10 && fileId.length() <= 100 && 
               fileId.matches("^[A-Za-z0-9_-]+$");
    }
}
