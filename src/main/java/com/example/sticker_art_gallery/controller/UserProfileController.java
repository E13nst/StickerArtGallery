package com.example.sticker_art_gallery.controller;

import com.example.sticker_art_gallery.dto.UserProfileDto;
import com.example.sticker_art_gallery.model.profile.UserProfileEntity;
import com.example.sticker_art_gallery.service.profile.UserProfileService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;

import java.util.Optional;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
@RestController
@RequestMapping("/api/profiles")
@PreAuthorize("hasAnyRole('USER', 'ADMIN')")
@Tag(name = "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
@SecurityRequirement(name = "TelegramInitData")
public class UserProfileController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(UserProfileController.class);
    
    private final UserProfileService userProfileService;
    
    @Autowired
    public UserProfileController(UserProfileService userProfileService) {
        this.userProfileService = userProfileService;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     */
    @GetMapping("/{userId}")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω",
            content = @Content(schema = @Schema(implementation = UserProfileDto.class),
                examples = @ExampleObject(value = """
                    {
                        "userId": 123456789,
                        "role": "USER",
                        "artBalance": 100,
                        "createdAt": "2025-01-15T10:30:00Z",
                        "updatedAt": "2025-01-15T14:30:00Z"
                    }
                    """))),
        @ApiResponse(responseCode = "404", description = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<UserProfileDto> getProfileById(
            @Parameter(description = "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required = true, example = "123456789")
            @PathVariable Long userId) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: {}", userId);
            Optional<UserProfileEntity> profileOpt = userProfileService.findByTelegramId(userId);
            
            if (profileOpt.isPresent()) {
                UserProfileDto profileDto = UserProfileDto.fromEntity(profileOpt.get());
                LOGGER.info("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: userId={}, role={}, balance={}", 
                           profileDto.getUserId(), profileDto.getRole(), profileDto.getArtBalance());
                return ResponseEntity.ok(profileDto);
            } else {
                LOGGER.warn("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", userId);
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {}: {}", userId, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å
     */
    @GetMapping("/me")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "404", description = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<UserProfileDto> getMyProfile() {
        try {
            Long currentUserId = getCurrentUserId();
            if (currentUserId == null) {
                LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return ResponseEntity.badRequest().build();
            }
            
            LOGGER.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", currentUserId);
            Optional<UserProfileEntity> profileOpt = userProfileService.findByTelegramId(currentUserId);
            
            if (profileOpt.isPresent()) {
                UserProfileDto profileDto = UserProfileDto.fromEntity(profileOpt.get());
                LOGGER.info("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: userId={}, role={}, balance={}", 
                           profileDto.getUserId(), profileDto.getRole(), profileDto.getArtBalance());
                return ResponseEntity.ok(profileDto);
            } else {
                LOGGER.warn("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω", currentUserId);
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PutMapping("/{userId}/balance")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(
        summary = "–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = "–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∞—Ä—Ç-–∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN)"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω"),
        @ApiResponse(responseCode = "404", description = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "403", description = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<UserProfileDto> updateUserBalance(
            @Parameter(description = "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required = true, example = "123456789")
            @PathVariable Long userId,
            @Parameter(description = "–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å", required = true, example = "100")
            @Valid @RequestBody @Min(value = 0, message = "–ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º") Long newBalance) {
        try {
            LOGGER.info("üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, newBalance);
            UserProfileEntity updatedProfile = userProfileService.updateArtBalance(userId, newBalance);
            UserProfileDto profileDto = UserProfileDto.fromEntity(updatedProfile);
            LOGGER.info("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: userId={}, newBalance={}", 
                       profileDto.getUserId(), profileDto.getArtBalance());
            return ResponseEntity.ok(profileDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping("/{userId}/balance/add")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(
        summary = "–î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = "–î–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç-–∫—Ä–µ–¥–∏—Ç–æ–≤ –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN)"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω"),
        @ApiResponse(responseCode = "404", description = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "403", description = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<UserProfileDto> addToUserBalance(
            @Parameter(description = "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required = true, example = "123456789")
            @PathVariable Long userId,
            @Parameter(description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", required = true, example = "50")
            @RequestBody Long amount) {
        try {
            LOGGER.info("üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, amount);
            UserProfileEntity updatedProfile = userProfileService.addToArtBalance(userId, amount);
            UserProfileDto profileDto = UserProfileDto.fromEntity(updatedProfile);
            LOGGER.info("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: userId={}, newBalance={}", 
                       profileDto.getUserId(), profileDto.getArtBalance());
            return ResponseEntity.ok(profileDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ—á—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ SecurityContext
     */
    private Long getCurrentUserId() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication == null || !authentication.isAuthenticated() || 
                "anonymousUser".equals(authentication.getPrincipal())) {
                return null;
            }
            return Long.valueOf(authentication.getName());
        } catch (Exception e) {
            return null;
        }
    }
}
