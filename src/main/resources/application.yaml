# Конфигурация приложения
app:
  url: ${APP_URL}
  mini-app:
    url: ${MINI_APP_URL:${app.url}/mini-app/}
  telegram:
    bot-token: ${TELEGRAM_BOT_TOKEN}
  sticker-cache:
    enabled: ${STICKER_CACHE_ENABLED:true}        # Включить/выключить кеширование стикеров
    ttl-days: ${STICKER_CACHE_TTL_DAYS:7}         # Время жизни кеша в днях
    min-size-bytes: ${STICKER_CACHE_MIN_SIZE:1024} # Минимальный размер файла для кеширования (байты)
    compress:
      enabled: ${STICKER_CACHE_COMPRESS_ENABLED:false}  # Включить сжатие
      compress-by-size: ${STICKER_CACHE_COMPRESS_BY_SIZE:100000}  # Сжимать файлы больше N байт
      format-settings:
        # Можно настроить сжатие для конкретных типов (опционально)
        # "application/x-tgsticker": true   # Сжимать TGS файлы
        # "video/mp4": true                  # Сжимать видео
        # "image/webp": false               # НЕ сжимать маленькие изображения

spring:
  application:
    name: sticker-art-gallery
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      chat:
        options:
          model: gpt-4o
          temperature: 0.9
      proxy:
        host: ${OPENAI_PROXY_HOST:}
        port: ${OPENAI_PROXY_PORT:}
        username: ${OPENAI_PROXY_USERNAME:}
        password: ${OPENAI_PROXY_PASSWORD:}
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:mindbase}
    username: ${DB_USERNAME:dalek}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 10000
      maximum-pool-size: 5
      minimum-idle: 2
      leak-detection-threshold: 30000
      connection-test-query: SELECT 1
      auto-commit: false
  jpa:
    hibernate:
      ddl-auto: validate  # Flyway управляет схемой, Hibernate только валидирует
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 20
          time_zone: UTC
        connection:
          provider_disables_autocommit: true
  
  # Настройки Flyway для автоматических миграций
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    baseline-version: 1.0.0
    baseline-description: "Initial baseline"
    
  data:
    redis:
      host: ${REDIS_HOST:amvera-e13nst-run-redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: 2000ms        # Timeout для операций (2 сек)
      connect-timeout: 3000ms # Timeout для подключения (3 сек)
      ssl:
        enabled: ${REDIS_SSL_ENABLED:false}
      # Connection pool settings
      lettuce:
        pool:
          max-active: 20    # Максимум соединений
          max-idle: 10      # Макс простаивающих
          min-idle: 5       # Мин простаивающих
          max-wait: 3000ms  # Ожидание соединения

# Swagger/OpenAPI конфигурация
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
    try-it-out-enabled: true
    filter: true
  default-produces-media-type: application/json
  default-consumes-media-type: application/json

# Конфигурация прокси для внешнего сервиса стикеров
sticker:
  processor:
    url: ${STICKER_PROCESSOR_URL:https://sticker-processor-e13nst.amvera.io}
    timeout:
      connect: 5000
      read: 10000

# Подробное логирование для диагностики
logging:
  level:
    # Глобальный уровень (по умолчанию INFO, на проде можно WARN)
    root: ${LOGGING_LEVEL_ROOT:INFO}
    
    # Spring Framework компоненты
    org.springframework.jdbc: ${LOGGING_LEVEL_SPRING_JDBC:INFO}
    org.hibernate.SQL: ${LOGGING_LEVEL_HIBERNATE_SQL:INFO}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOGGING_LEVEL_HIBERNATE_BINDER:INFO}
    com.zaxxer.hikari: ${LOGGING_LEVEL_HIKARI:INFO}
    org.springframework.orm.jpa: ${LOGGING_LEVEL_SPRING_JPA:INFO}
    org.springframework.boot.autoconfigure: ${LOGGING_LEVEL_SPRING_AUTOCONFIGURE:INFO}
    org.springframework.security: ${LOGGING_LEVEL_SPRING_SECURITY:INFO}
    
    # Наше приложение (по умолчанию DEBUG локально, WARN на проде)
    com.example.sticker_art_gallery: ${LOGGING_LEVEL_APP:INFO}
  
  # Паттерн логов (опционально)
  pattern:
    console: ${LOGGING_PATTERN_CONSOLE:%d{yyyy-MM-dd HH:mm:ss} - %msg%n}
    file: ${LOGGING_PATTERN_FILE:%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n}
  
