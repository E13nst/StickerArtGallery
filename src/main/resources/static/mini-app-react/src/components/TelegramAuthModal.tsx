import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  Alert,
  CircularProgress
} from '@mui/material';
import TelegramIcon from '@mui/icons-material/Telegram';
import { configService } from '@/api/config';

interface TelegramAuthModalProps {
  open: boolean;
  onClose: () => void;
  onAuthSuccess: (initData: string) => void;
  onAuthError: (error: string) => void;
  onSkipAuth: () => void;
}

export const TelegramAuthModal: React.FC<TelegramAuthModalProps> = ({
  open,
  onClose,
  onAuthSuccess,
  onAuthError,
  onSkipAuth
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [step, setStep] = useState<'init' | 'waiting' | 'success' | 'error'>('init');

  useEffect(() => {
    if (open) {
      setStep('init');
      setError(null);
    }
  }, [open]);

  const handleTelegramAuth = async () => {
    setIsLoading(true);
    setError(null);
    setStep('waiting');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞
      const config = await configService.getConfig();
      const botUsername = config.botName;
      
      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
      const redirectUrl = encodeURIComponent(window.location.origin + window.location.pathname);
      const telegramAuthUrl = `https://t.me/${botUsername}?startapp=${btoa(redirectUrl)}`;

      console.log('üîó Telegram Auth URL:', telegramAuthUrl);

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      window.open(telegramAuthUrl, '_blank', 'width=400,height=600');

      // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram Web App
      const handleMessage = (event: MessageEvent) => {
        if (event.origin !== 'https://web.telegram.org') {
          return;
        }

        if (event.data.type === 'telegram-auth') {
          const { initData } = event.data;
          if (initData) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω initData –æ—Ç Telegram:', initData);
            setStep('success');
            onAuthSuccess(initData);
            window.removeEventListener('message', handleMessage);
            setTimeout(() => {
              onClose();
            }, 1000);
          } else {
            console.error('‚ùå initData –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç Telegram');
            setStep('error');
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram');
            onAuthError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram');
            window.removeEventListener('message', handleMessage);
          }
          setIsLoading(false);
        }
      };

      window.addEventListener('message', handleMessage);

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      setTimeout(() => {
        window.removeEventListener('message', handleMessage);
        setIsLoading(false);
        if (step === 'waiting') {
          setStep('error');
          setError('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ');
          onAuthError('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ');
        }
      }, 60000); // 60 —Å–µ–∫—É–Ω–¥
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      setStep('error');
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞');
      setIsLoading(false);
    }
  };

  const renderContent = () => {
    switch (step) {
      case 'init':
        return (
          <Box sx={{ textAlign: 'center', p: 2 }}>
            <TelegramIcon sx={{ fontSize: 48, color: '#0088cc', mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
              –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, alignItems: 'center' }}>
              <Button
                variant="contained"
                size="large"
                startIcon={<TelegramIcon />}
                onClick={handleTelegramAuth}
                sx={{
                  backgroundColor: '#0088cc',
                  '&:hover': {
                    backgroundColor: '#006699',
                  },
                }}
              >
                –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram
              </Button>
              
              <Button
                variant="outlined"
                size="medium"
                onClick={onSkipAuth}
                sx={{ minWidth: 200 }}
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              </Button>
            </Box>
          </Box>
        );

      case 'waiting':
        return (
          <Box sx={{ textAlign: 'center', p: 2 }}>
            <CircularProgress sx={{ mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            </Typography>
            <Typography variant="body2" color="text.secondary">
              –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Start" –≤ –±–æ—Ç–µ
            </Typography>
          </Box>
        );

      case 'success':
        return (
          <Box sx={{ textAlign: 'center', p: 2 }}>
            <TelegramIcon sx={{ fontSize: 48, color: '#4caf50', mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!
            </Typography>
            <Typography variant="body2" color="text.secondary">
              –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ Telegram
            </Typography>
          </Box>
        );

      case 'error':
        return (
          <Box sx={{ textAlign: 'center', p: 2 }}>
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
            <Button
              variant="outlined"
              onClick={() => {
                setStep('init');
                setError(null);
              }}
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </Box>
        );

      default:
        return null;
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</DialogTitle>
      <DialogContent>
        {renderContent()}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} disabled={isLoading}>
          {step === 'success' ? '–ó–∞–∫—Ä—ã—Ç—å' : '–û—Ç–º–µ–Ω–∞'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};
