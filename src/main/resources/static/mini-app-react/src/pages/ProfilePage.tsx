import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  Container, 
  Box,
  Alert
} from '@mui/material';
import { useTelegram } from '@/hooks/useTelegram';
import { useProfileStore } from '@/store/useProfileStore';
import { apiClient } from '@/api/client';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { Header } from '@/components/Header';
import { UserInfoCard } from '@/components/UserInfoCard';
import { SearchBar } from '@/components/SearchBar';
import { StickerSetList } from '@/components/StickerSetList';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { ErrorDisplay } from '@/components/ErrorDisplay';
import { EmptyState } from '@/components/EmptyState';
import { BottomNav } from '@/components/BottomNav';
import { StickerSetDetail } from '@/components/StickerSetDetail';

export const ProfilePage: React.FC = () => {
  const { userId } = useParams<{ userId: string }>();
  const navigate = useNavigate();
  const { tg, isInTelegramApp } = useTelegram();

  const {
    isLoading,
    isUserLoading,
    isStickerSetsLoading,
    userInfo,
    userStickerSets,
    error,
    userError,
    stickerSetsError,
    setLoading,
    setUserLoading,
    setStickerSetsLoading,
    setUserInfo,
    setUserStickerSets,
    setError,
    setUserError,
    setStickerSetsError,
    removeUserStickerSet,
    reset
  } = useProfileStore();

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [searchTerm, setSearchTerm] = useState('');
  const [viewMode, setViewMode] = useState<'list' | 'detail'>('list');
  const [selectedStickerSet, setSelectedStickerSet] = useState<any>(null);
  const [activeBottomTab, setActiveBottomTab] = useState(3); // –ü—Ä–æ—Ñ–∏–ª—å = –∏–Ω–¥–µ–∫—Å 3

  // –í–∞–ª–∏–¥–∞—Ü–∏—è userId
  const userIdNumber = userId ? parseInt(userId, 10) : null;
  
  useEffect(() => {
    if (!userIdNumber || isNaN(userIdNumber)) {
      setError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reset();
    loadUserProfile(userIdNumber);
  }, [userIdNumber]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserProfile = async (id: number) => {
    setLoading(true);
    
    try {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
      const [userResponse, stickerSetsResponse] = await Promise.allSettled([
        loadUserInfo(id),
        loadUserStickerSets(id)
      ]);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (userResponse.status === 'rejected') {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userResponse.reason);
      }
      
      if (stickerSetsResponse.status === 'rejected') {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤:', stickerSetsResponse.reason);
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è';
      setError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const loadUserInfo = async (id: number) => {
    setUserLoading(true);
    setUserError(null);

    try {
      const userInfo = await apiClient.getUserInfo(id);
      setUserInfo(userInfo);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      setUserError(errorMessage);
      throw error;
    } finally {
      setUserLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserStickerSets = async (id: number, searchQuery?: string) => {
    setStickerSetsLoading(true);
    setStickerSetsError(null);

    try {
      const response = searchQuery 
        ? await apiClient.searchUserStickerSets(id, searchQuery)
        : await apiClient.getUserStickerSets(id);
      
      setUserStickerSets(response.content || []);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤';
      setStickerSetsError(errorMessage);
      throw error;
    } finally {
      setStickerSetsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handleBack = () => {
    if (viewMode === 'detail') {
      setViewMode('list');
      setSelectedStickerSet(null);
    } else {
      navigate('/'); // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    }
  };

  const handleViewStickerSet = (id: number, _name: string) => {
    const stickerSet = userStickerSets.find(s => s.id === id);
    if (stickerSet) {
      setSelectedStickerSet(stickerSet);
      setViewMode('detail');
    }
  };

  const handleShareStickerSet = (name: string, _title: string) => {
    if (tg) {
      tg.openTelegramLink(`https://t.me/addstickers/${name}`);
    } else {
      window.open(`https://t.me/addstickers/${name}`, '_blank');
    }
  };

  const handleDeleteStickerSet = async (id: number, title: string) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ "${title}"?`)) {
      return;
    }

    try {
      await apiClient.deleteStickerSet(id);
      removeUserStickerSet(id);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞';
      alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞: ${errorMessage}`);
    }
  };

  const handleCreateSticker = () => {
    if (tg) {
      tg.openTelegramLink('https://t.me/StickerGalleryBot');
    } else {
      window.open('https://t.me/StickerGalleryBot', '_blank');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  const handleSearchChange = (newSearchTerm: string) => {
    setSearchTerm(newSearchTerm);
    
    if (!userIdNumber) return;

    // –î–µ–±–∞—É–Ω—Å –ø–æ–∏—Å–∫–∞
    const delayedSearch = setTimeout(() => {
      loadUserStickerSets(userIdNumber, newSearchTerm);
    }, 500);

    return () => clearTimeout(delayedSearch);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–∞—è + —Å–µ—Ä–≤–µ—Ä–Ω–∞—è)
  const filteredStickerSets = userStickerSets.filter(stickerSet =>
    stickerSet.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
  useEffect(() => {
    if (tg?.BackButton) {
      tg.BackButton.onClick(handleBack);
      tg.BackButton.show();
    }

    return () => {
      if (tg?.BackButton) {
        tg.BackButton.hide();
      }
    };
  }, [tg, viewMode]);

  console.log('üîç ProfilePage —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    userId: userIdNumber,
    userInfo: userInfo?.firstName,
    stickerSetsCount: userStickerSets.length,
    filteredCount: filteredStickerSets.length,
    isLoading,
    viewMode
  });

  // –û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <Box sx={{ minHeight: '100vh', backgroundColor: 'background.default' }}>
        <Header 
          title="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          onMenuClick={handleBack}
          showOptions={false}
        />
        <Container maxWidth="lg" sx={{ py: 2 }}>
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
          <EmptyState
            title="‚ùå –û—à–∏–±–∫–∞"
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            actionLabel="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
            onAction={() => navigate('/')}
          />
        </Container>
      </Box>
    );
  }

  return (
    <Box sx={{ 
      minHeight: '100vh', 
      backgroundColor: 'background.default',
      paddingBottom: isInTelegramApp ? 0 : 8 // –û—Ç—Å—Ç—É–ø –¥–ª—è BottomNav
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Header 
        title={viewMode === 'detail' ? selectedStickerSet?.title || '–î–µ—Ç–∞–ª–∏' : '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
        onMenuClick={handleBack}
        showOptions={false}
      />

      <Container maxWidth={isInTelegramApp ? "sm" : "lg"} sx={{ py: 2 }}>
        {viewMode === 'list' ? (
          <>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
            {userInfo && (
              <UserInfoCard 
                userInfo={userInfo} 
                isLoading={isUserLoading} 
              />
            )}

            {/* –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
            {userError && (
              <Alert severity="error" sx={{ mb: 2 }}>
                {userError}
              </Alert>
            )}

            {/* –ü–æ–∏—Å–∫ */}
            <SearchBar
              value={searchTerm}
              onChange={handleSearchChange}
              placeholder="üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
              disabled={isStickerSetsLoading}
            />

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ */}
            {isStickerSetsLoading ? (
              <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤..." />
            ) : stickerSetsError ? (
              <ErrorDisplay 
                error={stickerSetsError} 
                onRetry={() => userIdNumber && loadUserStickerSets(userIdNumber)} 
              />
            ) : filteredStickerSets.length === 0 ? (
              <EmptyState
                title="üìÅ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
                message={
                  searchTerm 
                    ? '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' 
                    : userInfo 
                      ? `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userInfo.firstName} –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤`
                      : '–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤'
                }
                actionLabel="–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä"
                onAction={handleCreateSticker}
              />
            ) : (
              <StickerSetList
                stickerSets={filteredStickerSets}
                onView={handleViewStickerSet}
                onShare={handleShareStickerSet}
                onDelete={handleDeleteStickerSet}
                isInTelegramApp={isInTelegramApp}
              />
            )}
          </>
        ) : (
          // –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
          selectedStickerSet && (
            <StickerSetDetail
              stickerSet={selectedStickerSet}
              onBack={() => setViewMode('list')}
              onShare={handleShareStickerSet}
              onDelete={handleDeleteStickerSet}
              isInTelegramApp={isInTelegramApp}
            />
          )
        )}
      </Container>

      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <BottomNav
        activeTab={activeBottomTab}
        onChange={setActiveBottomTab}
        isInTelegramApp={isInTelegramApp}
      />
    </Box>
  );
};
