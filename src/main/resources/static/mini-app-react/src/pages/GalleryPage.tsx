import React, { useEffect, useState } from 'react';
import { 
  Container, 
  Box,
} from '@mui/material';
import { useTelegram } from '@/hooks/useTelegram';
import { useStickerStore } from '@/store/useStickerStore';
import { apiClient } from '@/api/client';
import { StickerSetResponse } from '@/types/sticker';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { Header } from '@/components/Header';
import { UserInfo } from '@/components/UserInfo';
import { AuthStatus } from '@/components/AuthStatus';
import { DebugPanel } from '@/components/DebugPanel';
import { SearchBar } from '@/components/SearchBar';
import { StickerSetList } from '@/components/StickerSetList';
import { StickerSetDetail } from '@/components/StickerSetDetail';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { ErrorDisplay } from '@/components/ErrorDisplay';
import { EmptyState } from '@/components/EmptyState';
import { BottomNav } from '@/components/BottomNav';
import { TelegramAuthModal } from '@/components/TelegramAuthModal';

export const GalleryPage: React.FC = () => {
  const { tg, user, initData, isReady, isInTelegramApp, checkInitDataExpiry } = useTelegram();
  const {
    isLoading,
    isAuthLoading,
    stickerSets,
    authStatus,
    error,
    authError,
    setLoading,
    setAuthLoading,
    setStickerSets,
    setAuthStatus,
    setError,
    setAuthError,
    removeStickerSet,
  } = useStickerStore();

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [searchTerm, setSearchTerm] = useState('');
  const [viewMode, setViewMode] = useState<'list' | 'detail'>('list');
  const [selectedStickerSet, setSelectedStickerSet] = useState<StickerSetResponse | null>(null);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [manualInitData, setManualInitData] = useState<string>('');
  const [activeBottomTab, setActiveBottomTab] = useState(0);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const checkAuth = async () => {
    console.log('üîç checkAuth –≤—ã–∑–≤–∞–Ω:');
    console.log('  isInTelegramApp:', isInTelegramApp);
    console.log('  initData:', initData ? `${initData.length} chars` : 'empty');
    console.log('  manualInitData:', manualInitData ? `${manualInitData.length} chars` : 'empty');
    console.log('  user:', user);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º manualInitData –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ initData –æ—Ç Telegram
    const currentInitData = manualInitData || initData;

    if (!isInTelegramApp && !manualInitData) {
      // –í –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      console.log('üåê –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      setShowAuthModal(true);
      setAuthStatus({
        authenticated: false,
        role: 'anonymous'
      });
      return false;
    }

    setAuthLoading(true);
    setAuthError(null);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è initData
      const initDataCheck = checkInitDataExpiry(currentInitData);
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ initData:', initDataCheck);
      if (!initDataCheck.valid) {
        throw new Error(initDataCheck.reason);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      apiClient.setAuthHeaders(currentInitData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      const authResponse = await apiClient.checkAuthStatus();
      console.log('üîç –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authResponse);
      setAuthStatus(authResponse);

      if (!authResponse.authenticated) {
        throw new Error(authResponse.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }

      return true;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setAuthError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return false;
    } finally {
      setAuthLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleAuthSuccess = (newInitData: string) => {
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º initData');
    setManualInitData(newInitData);
    setShowAuthModal(false);
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    checkAuth();
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleAuthError = (error: string) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    setAuthError(error);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleSkipAuth = () => {
    console.log('‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    setShowAuthModal(false);
    setAuthStatus({
      authenticated: true,
      role: 'public'
    });
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
  const fetchStickerSets = async (page: number = 0) => {
    setLoading(true);
    setError(null);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const isAuthenticated = await checkAuth();
      if (!isAuthenticated && isInTelegramApp) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã
      const response = await apiClient.getStickerSets(page);
      setStickerSets(response.content || []);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤';
      setError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
  const searchStickerSets = async (query: string) => {
    if (!query.trim()) {
      fetchStickerSets();
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await apiClient.searchStickerSets(query);
      setStickerSets(response.content || []);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤';
      setError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handleViewStickerSet = (id: number, _name: string) => {
    const stickerSet = stickerSets.find(s => s.id === id);
    if (stickerSet) {
      setSelectedStickerSet(stickerSet);
      setViewMode('detail');
    }
  };

  const handleShareStickerSet = (name: string, _title: string) => {
    if (tg) {
      tg.openTelegramLink(`https://t.me/addstickers/${name}`);
    } else {
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
      window.open(`https://t.me/addstickers/${name}`, '_blank');
    }
  };

  const handleDeleteStickerSet = async (id: number, title: string) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ "${title}"?`)) {
      return;
    }

    try {
      await apiClient.deleteStickerSet(id);
      removeStickerSet(id);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞';
      alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞: ${errorMessage}`);
    }
  };

  const handleBackToList = () => {
    setViewMode('list');
    setSelectedStickerSet(null);
  };

  const handleCreateSticker = () => {
    if (tg) {
      tg.openTelegramLink('https://t.me/StickerGalleryBot');
    } else {
      window.open('https://t.me/StickerGalleryBot', '_blank');
    }
  };

  const handleMenuClick = () => {
    console.log('üîç –ú–µ–Ω—é –Ω–∞–∂–∞—Ç–æ');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
  };

  const handleOptionsClick = () => {
    console.log('üîç –û–ø—Ü–∏–∏ –Ω–∞–∂–∞—Ç—ã');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –æ–ø—Ü–∏–π
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  const handleSearchChange = (newSearchTerm: string) => {
    setSearchTerm(newSearchTerm);
    // –î–µ–±–∞—É–Ω—Å –ø–æ–∏—Å–∫–∞
    const delayedSearch = setTimeout(() => {
      searchStickerSets(newSearchTerm);
    }, 500);

    return () => clearTimeout(delayedSearch);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–æ–∏—Å–∫)
  const filteredStickerSets = stickerSets.filter(stickerSet =>
    stickerSet.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  console.log('üîç GalleryPage —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    stickerSets: stickerSets.length,
    filteredStickerSets: filteredStickerSets.length,
    searchTerm,
    viewMode,
    isInTelegramApp,
    isLoading,
    isAuthLoading
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (isReady) {
      fetchStickerSets();
    }
  }, [isReady]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
  useEffect(() => {
    if (tg?.BackButton) {
      tg.BackButton.onClick(() => {
        if (viewMode === 'detail') {
          handleBackToList();
        } else {
          tg.close();
        }
      });

      if (viewMode === 'detail') {
        tg.BackButton.show();
      } else {
        tg.BackButton.hide();
      }
    }
  }, [tg, viewMode]);

  if (!isReady) {
    return <LoadingSpinner message="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..." />;
  }

  return (
    <Box sx={{ 
      minHeight: '100vh', 
      backgroundColor: 'background.default',
      paddingBottom: isInTelegramApp ? 0 : 8 // –û—Ç—Å—Ç—É–ø –¥–ª—è BottomNav –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Header 
        title="üé® –ì–∞–ª–µ—Ä–µ—è —Å—Ç–∏–∫–µ—Ä–æ–≤"
        onMenuClick={handleMenuClick}
        onOptionsClick={handleOptionsClick}
      />

      <Container maxWidth={isInTelegramApp ? "sm" : "lg"} sx={{ py: 2 }}>
        {viewMode === 'list' ? (
          <>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
            <UserInfo user={user} isLoading={isAuthLoading} />

            {/* –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
            <AuthStatus 
              authStatus={authStatus} 
              isLoading={isAuthLoading} 
              error={authError} 
            />

            {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
            <DebugPanel
              user={user}
              initData={initData}
              platform={tg?.platform}
              version={tg?.version}
              initDataValid={checkInitDataExpiry(initData).valid}
              initDataError={checkInitDataExpiry(initData).reason}
            />

            {/* –ü–æ–∏—Å–∫ */}
            <SearchBar
              value={searchTerm}
              onChange={handleSearchChange}
              disabled={isLoading}
            />

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
            {isLoading ? (
              <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤..." />
            ) : error ? (
              <ErrorDisplay error={error} onRetry={() => fetchStickerSets()} />
            ) : filteredStickerSets.length === 0 ? (
              <EmptyState
                title="üé® –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                message={searchTerm ? '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤'}
                actionLabel="–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä"
                onAction={handleCreateSticker}
              />
            ) : (
              <StickerSetList
                stickerSets={filteredStickerSets}
                onView={handleViewStickerSet}
                onShare={handleShareStickerSet}
                onDelete={handleDeleteStickerSet}
                isInTelegramApp={isInTelegramApp}
              />
            )}
          </>
        ) : (
          // –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
          selectedStickerSet && (
            <StickerSetDetail
              stickerSet={selectedStickerSet}
              onBack={handleBackToList}
              onShare={handleShareStickerSet}
              onDelete={handleDeleteStickerSet}
              isInTelegramApp={isInTelegramApp}
            />
          )
        )}
      </Container>

      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <BottomNav
        activeTab={activeBottomTab}
        onChange={setActiveBottomTab}
        isInTelegramApp={isInTelegramApp}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
      <TelegramAuthModal
        open={showAuthModal}
        onClose={() => setShowAuthModal(false)}
        onAuthSuccess={handleAuthSuccess}
        onAuthError={handleAuthError}
        onSkipAuth={handleSkipAuth}
      />
    </Box>
  );
};
