/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'org.flywaydb.flyway' version '10.8.1'
    id 'io.qameta.allure' version '2.11.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'sticker-art-gallery'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://repo.huaweicloud.com/repository/maven/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spring.io/milestone' }
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:1.0.0-M2"
        mavenBom "io.qameta.allure:allure-bom:2.25.0"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter:1.0.0-M2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.telegram:telegrambots:6.9.7.1'
    implementation 'org.json:json:20220924'
    implementation 'com.squareup.okhttp3:okhttp:3.14.9'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'ch.qos.logback:logback-classic:1.5.6'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    implementation 'net.gcardone.junidecode:junidecode:0.5.1'
    implementation 'net.datafaker:datafaker:2.3.1'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.6'
    implementation 'com.pngencoder:pngencoder:0.16.0' // –ë—ã—Å—Ç—Ä—ã–π PNG —ç–Ω–∫–æ–¥–µ—Ä
    
    // Swagger/OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    runtimeOnly 'org.postgresql:postgresql'
    
    // Flyway –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –ë–î
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.qameta.allure:allure-junit5'
    testImplementation 'io.qameta.allure:allure-rest-assured'
    testImplementation 'io.qameta.allure:allure-java-commons'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'io.rest-assured:json-schema-validator:5.4.0'
    testRuntimeOnly 'com.h2database:h2'
    developmentOnly 'com.h2database:h2'  // H2 –¥–ª—è dev –ø—Ä–æ—Ñ–∏–ª—è
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

// JUnit 5 configuration
// UNIT —Ç–µ—Å—Ç—ã - –±—ã—Å—Ç—Ä—ã–µ, –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å unit –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
    systemProperty 'spring.profiles.active', 'unit'
    
    // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
    include '**/*Test.class'
    exclude '**/*IntegrationTest.class'
    
    doFirst {
        println 'üß™ –ó–∞–ø—É—Å–∫ UNIT —Ç–µ—Å—Ç–æ–≤ (–ø—Ä–æ—Ñ–∏–ª—å: unit)'
    }
}

// INTEGRATION —Ç–µ—Å—Ç—ã - —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
task integrationTest(type: Test) {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å test –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    systemProperty 'spring.profiles.active', 'test'
    
    // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    include '**/*IntegrationTest.class'
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    doFirst {
        def envFile = file('.env.app')
        if (envFile.exists()) {
            envFile.readLines().each { line ->
                if (line && !line.startsWith('#') && line.contains('=')) {
                    def (key, value) = line.split('=', 2)
                    environment key.trim(), value.trim()
                }
            }
            println '‚úÖ –ó–∞–ø—É—Å–∫ INTEGRATION —Ç–µ—Å—Ç–æ–≤ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.app'
        } else {
            println '‚ö†Ô∏è –§–∞–π–ª .env.app –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
        }
    }
    
    doFirst {
        println 'üîó –ó–∞–ø—É—Å–∫ INTEGRATION —Ç–µ—Å—Ç–æ–≤ (–ø—Ä–æ—Ñ–∏–ª—å: test)'
    }
}

// –í—Å–µ —Ç–µ—Å—Ç—ã –≤–º–µ—Å—Ç–µ
task allTests {
    dependsOn test, integrationTest
    description = '–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã (unit + integration)'
}

// Allure configuration
allure {
    version = '2.25.0'
    adapter {
        autoconfigure = true
        aspectjWeaver = true
        frameworks {
            junit5 {
                adapterVersion = '2.25.0'
            }
        }
    }
}

// Flyway configuration
flyway {
    url = "jdbc:postgresql://${System.getenv('DB_HOST') ?: 'amvera-e13nst-run-postgres'}:${System.getenv('DB_PORT') ?: '5432'}/${System.getenv('DB_NAME') ?: 'mindbase'}"
    user = System.getenv('DB_USERNAME') ?: 'dalek'
    password = System.getenv('DB_PASSWORD') ?: 'postgres'
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
    validateOnMigrate = true
    baselineVersion = '1.0.0'
    baselineDescription = 'Initial baseline'
}
